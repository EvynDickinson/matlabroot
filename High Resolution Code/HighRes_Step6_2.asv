
% Generate figures to compare different behaviors and frequencies of
% behaviors over time:


%% Simple comparison across flies: distance to food over time
clearvars('-except',initial_var{:})

% plot the data:
lw = 0.25;
sSpan = 5*fly(1).fps; %  5 second smoothing

% fig = getfig('',1); hold on
% for sex = 1:2
%     % plot all the trials
%     x = repmat(data.time, [1,num.trials]);
%     y = squeeze(data.dist2food(:,sex,:));
%     plot(x,y,'color', data.color(sex,:),'LineWidth',lw)
% end
% xlabel('time (min)')
% ylabel('distance to food (mm)')
% formatFig(fig);
% save_figure(fig, [figDir 'test fly distance to food all trials'],fig_type)

% Plot the average distance to food across the trials: 
fig = getfig('',1); 
subplot()
hold on
for sex = 1:2
    % plot all the trials
    x = data.time;
    y = squeeze(data.dist2food(:,sex,:));
    y_avg = mean(y,2,'omitnan');
    y_err = std(y,0,2,'omitnan')/sqrt(num.trials);
    h = plot_error_fills(true, x, y_avg, y_err, data.color(sex,:),  '-png');
    plot(x,y_avg,'color', data.color(sex,:),'LineWidth',lw)
end
xlabel('time (min)')
ylabel('distance to food (mm)')
formatFig(fig,blkbgd);
save_figure(fig, [figDir 'avg distance to food M and F'],fig_type)


% % TODO: 5.13 MAKE A THING TO PLOT TEMP, FOOD METRIC, AND THEN THE
% TEMP-TUNING CURVE

% clearvars('-except',initial_vars{:})
% plot_err = true;
% autoLim = true;
% % Y limit ranges
% dist_lim = [5,35];       %distance
% dt_lim = [10,32];        %distance-temp
% auto_time = true;      % automated time axis limits
% time_lim = [0,400];     %time limit (x-axis)
% nMax =  num.exp;%
% [~,backColor] = formattingColors(blkbgd); %get background colors
% 
% % set up figure aligments
% r = 5; %rows
% c = 3; %columns
% sb(1).idx = [1,2]; %temp timecourse
% sb(2).idx = [4,5,7,8,10,11,13,14]; %distance from food timecourse %TODO: normalize this to something more intuitive?
% sb(3).idx = 3:c:r*c; %binned distance alignment
% 
% LW = 0.75;
% sSpan = 360;
% dataString = cell([1,num.exp]);
% 
% % FIGURE:
% fig = getfig('',true);
% for i = 1:nMax
% %     i = expOrder(ii);
%     x = grouped(i).time;
%     kolor = grouped(i).color;
% 
%     %temp
%     subplot(r,c,sb(1).idx); hold on
%         y = grouped(i).temp;
%         plot(x,y,'LineWidth',2,'Color',kolor)
% 
%     %distance
%     subplot(r,c,sb(2).idx); hold on
%         y = smooth(grouped(i).dist.avg,'moving',sSpan);
% %         y_err = smooth(grouped(i).dist.err,'moving',sSpan);
%         plot(x,y,'LineWidth',LW,'Color',kolor)
%         if ~autoLim
%             ylim(dist_lim)
%         end
% 
%     %temp dependent distance
%     subplot(r,c,sb(3).idx); hold on
%         x = grouped(i).dist.distavgbytemp(:,1);
%         y = grouped(i).dist.distavgbytemp(:,2);
%         y_err = grouped(i).dist.distavgbytemp_err(:,2);
% 
%         plot(x,y,'color',kolor,'linewidth',LW+1)
%         plot_error_fills(plot_err, x, y, y_err, kolor,  fig_type, 0.35);
%         dataString{i} = grouped(i).name;
% end
% 
% % FORMATING AND LABELS
% formatFig(fig,blkbgd,[r,c],sb);
% % temp
% subplot(r,c,sb(1).idx)
% ylabel('\circC')
% set(gca,"XColor",backColor)
% if ~auto_time
%     xlim(time_lim)
% end
% % distance
% subplot(r,c,sb(2).idx)
% ylabel('proximity to food (mm)')
% xlabel('time (min)')
% set(gca,'ydir','reverse')
% if ~auto_time
%     xlim(time_lim)
% end
% % temp-distance relationship
% subplot(r,c,sb(3).idx)
% ylabel('proximity to food (mm)')
% xlabel('temp (\circC)')
% if ~autoLim
%     ylim(dt_lim)
% end
% h_line(18.1,'grey',':',1) %36.2
% set(gca,'ydir','reverse')
% %
% % legend(dataString,'textcolor', foreColor, 'location', 'southeast', 'box', 'off','fontsize', 5)
% 
% % % get the avg distance over the whole experiment
% % roi = [1000 159935];
% % [dist_mean, dist_err] = deal([]);
% % for i = 1:num.exp
% %     dist_all = mean(grouped(i).dist.all(roi(1):roi(2),:),1,'omitnan');
% %     dist_err(i) = std(dist_all);
% %     dist_mean(i) = mean(dist_all);
% % end
% %
% % e = errorbar([17,20,23,25],dist_mean,dist_err);
% % e.Marker  = 'o';
% % e.Color = 'r';
% % e.MarkerSize = 10;
% 
% % save figure
% save_figure(fig,[saveDir expGroup ' timecourse summary no speed food only'],fig_type);




%% plot the female and male positions within the arena ...
% TODO: need to rotate the arena to match the food alignment across trials ...
clearvars('-except',initial_var{:})
[foreColor, ~] = formattingColors(blkbgd); % get background colors

a = inputdlg(['There are ' num2str(num.trials) ' figures, how many columns?']);
c = str2double(a{:});
r = ceil(num.trials/c);

% female position figure: 
fig = getfig('female fly positions in the arena', 1,[1064 774]);
for i = 1:num.trials
    subplot(r,c,i); % male position in arena
    x = fly(i).f.pos(:,body.center,1);
    y = fly(i).f.pos(:,body.center,2);
    scatter(x,y,3, data.color(F,:))
    hold on
    scatter(fly(i).well.food(1),fly(i).well.food(2),10, foreColor)
    viscircles(fly(i).well.center(5,:),30/fly(i).pix2mm,'Color',foreColor)
    axis square equal
    set(gca, 'XColor','none', 'ycolor', 'none')
end
save_figure(fig, [figDir 'female fly positions in arena'],fig_type)

% male position figure: 
fig = getfig('male fly positions in the arena', 1,[1064 774]);
for i = 1:num.trials
    subplot(r,c,i); % male position in arena
    x = fly(i).m.pos(:,body.center,1);
    y = fly(i).m.pos(:,body.center,2);
    scatter(x,y,3, data.color(M,:))
    hold on
    scatter(fly(i).well.food(1),fly(i).well.food(2),10, foreColor)
    viscircles(fly(i).well.center(5,:),30/fly(i).pix2mm,'Color',foreColor);
    axis square equal
    set(gca, 'XColor','none', 'ycolor', 'none')
end
save_figure(fig, [figDir 'male fly positions in arena'],fig_type)


%% plot the avg and err of a variable for both flies along with the temperature 
clearvars('-except',initial_var{:})
figFolder = createFolder([figDir 'timecourse/']);
[foreColor, ~] = formattingColors(blkbgd); %get background colors
LW = 1.5; %linewidth for plotting
plot_err = true; % plot the error on the graph?
fig_type = '-png';
sSpan = 15*fly(1).fps;

opt_list = {'distance to food', 'inter-fly-distance', 'eccentricity', 'food quadrant', 'food circle', 'turning','sleep','outer ring','courtship index', 'flies on food'}; 
list_idx = listdlg('promptstring','Select the variable to plot', 'ListString',opt_list,'ListSize',[200,180]);
if isempty(list_idx)
        disp('No variable selected')
        return
end  

% defaults 
multiplier = 1;
sem_scale = 1; %(1/num.trials);
axis_dir = 'normal';

% pre-load variable specific data format
switch opt_list{list_idx}
    case 'distance to food'
        y_label = [opt_list{list_idx} ' (mm)'];
        axis_dir = 'reverse';
        d_type = 2; % M F separate
        d_name = 'dist2food';
    case 'inter-fly-distance'
        y_label = [opt_list{list_idx} ' (mm)'];
        d_type = 1; % combined MF
        d_name = 'IFD';
    case 'courtship index'
        y_label = opt_list{list_idx};
        d_type = 1; % combined MF
        d_name = 'CI';
    case 'flies on food'
        y_label = opt_list{list_idx};
        d_type = 2; % M F separate
        d_name = 'FlyOnFood';
        multiplier = 100;
    case 'eccentricity'
        y_label = [opt_list{list_idx} ' (mm)'];
        d_type = 2; % M F separate
        d_name = opt_list{list_idx};
    case 'food quadrant'
        y_label = [opt_list{list_idx} ' (%)'];
        d_type = 2; % M F separate
        d_name = 'foodQuad';
        multiplier = 100;
    case 'food circle'
        y_label = [opt_list{list_idx} ' (%)'];
        d_type = 2; % M F separate
        d_name = 'foodcircle';
        multiplier = 100;
    case 'outer ring'
        y_label = [opt_list{list_idx} ' (%)'];
        d_type = 2; % M F separate
        d_name = 'OutterRing';
        multiplier = 100;
    case 'turning'
        y_label = [opt_list{list_idx} ' (mm/s)'];
        d_type = 2; % M F separate
        d_name = opt_list{list_idx};
    case 'sleep'
        y_label = [opt_list{list_idx} ' (%)'];
        d_type = 2; % M F separate
        d_name = opt_list{list_idx};
        multiplier = 100;
end

% set up figure aligments
r = 5; %rows
c = 3; %columns
sb(1).idx = [1,2]; %temp timecourse
sb(2).idx = [4,5,7,8,10,11,13,14]; % variable to examine timecourse
sb(3).idx = 3:c:r*c; % temp binned variable alignment

fig = getfig('',1);
% temperature time course
subplot(r,c,sb(1).idx); hold on
x = data.time;
y = data.temp;
plot(x,y,'color', foreColor, 'linewidth',LW)
% TODO: update this code to load and parse the data correctly for diff
% sized data structures (e.g., 2 flies vs single column)  
raw_data = data.(d_name);

% time course of variable
subplot(r,c,sb(2).idx); hold on
x = data.time;
switch d_type
    case 1 % single value for M & F
            y_all = raw_data;
            y_avg = smooth(mean(y_all,2,'omitnan'),sSpan,'moving').*multiplier;
            y_err = smooth(std(y_all, 0,2,'omitnan'),sSpan,'moving').*multiplier.*sem_scale;
            plot_error_fills(plot_err, x, y_avg, y_err, foreColor,fig_type, 0.35);
            plot(x,y_avg,'color',foreColor,'linewidth',LW+1)
    case 2 % separate values for M & F 
        for sex = 1:2
            y_all = squeeze(raw_data(:,sex,:));
            y_avg = smooth(mean(y_all,2,'omitnan'),sSpan,'moving').*multiplier;
            y_err = smooth(std(y_all, 0,2,'omitnan'),sSpan,'moving').*multiplier.*sem_scale;
            plot_error_fills(plot_err, x, y_avg, y_err, data.color(sex,:),fig_type, 0.35);
            plot(x,y_avg,'color',data.color(sex,:),'linewidth',LW+1)
        end
end

%temp dependent variable
subplot(r,c,sb(3).idx); hold on
x = data.tempbin.temps;
    for sex = 1:2
        % setup the data for extraction
        if d_type==1
            y_all = raw_data;
            kolor = foreColor;
        else
            y_all = squeeze(raw_data(:,sex,:));
            kolor = data.color(sex,:);
        end
        if d_type==1 && sex==2
            continue
        end
        %extract data
        [c_avg,w_avg,c_err,w_err] = deal([]);
        for t = 1:length(x)
            % cooling
            loc = data.tempbin.cooling(:,t);
            y_sel = mean(y_all(loc,:),1,'omitnan').*multiplier;
            c_avg(t) = mean(y_sel,'omitnan');
            c_err(t) = std(y_sel, 0,2,'omitnan').*sem_scale;
            % warming
            loc = data.tempbin.warming(:,t);
            y_sel = mean(y_all(loc,:),1,'omitnan').*multiplier;
            w_avg(t) = mean(y_sel,'omitnan');
            w_err(t) = std(y_sel, 0,2,'omitnan').*sem_scale;
            % % cooling
            % loc = data.tempbin.cooling(:,t);
            % y_sel = mean(squeeze(raw_data(loc,sex,:)),1,'omitnan');
            % c_avg(t) = mean(y_sel,'omitnan');
            % c_err(t) = std(y_sel, 0,2,'omitnan');
            % % warming
            % loc = data.tempbin.warming(:,t);
            % y_sel = mean(squeeze(raw_data(loc,sex,:)),1,'omitnan');
            % w_avg(t) = mean(y_sel,'omitnan');
            % w_err(t) = std(y_sel, 0,2,'omitnan');
        end
        % plot data
        plot_error_fills(plot_err, x, c_avg, c_err, kolor,fig_type);
        plot_error_fills(plot_err, x, w_avg, c_err, kolor,fig_type);
        plot(x,c_avg,'color',kolor,'linewidth',LW+1,'LineStyle','--')
        plot(x,w_avg,'color',kolor,'linewidth',LW+1,'LineStyle','-')
    end

% format figure: 
formatFig(fig, blkbgd, [r,c],sb);
subplot(r,c,sb(1).idx);
    set(gca, 'xcolor', 'none')
    ylabel('\circC')
subplot(r,c,sb(2).idx);    
    ylabel(y_label)
    xlabel('time (min)')
    set(gca, 'YDir',axis_dir)
     ylims = ylim;
    if ylims(1)<0
        ylims(1) = 0;
    end
    if ylims(2) >100
        ylims(2) = 100;
    end
    ylim(ylims)
subplot(r,c,sb(3).idx);
    ylabel(y_label)
    xlabel('temp (\circC)')
    set(gca, 'YDir',axis_dir)
     ylims = ylim;
    if ylims(1)<0
        ylims(1) = 0;
    end
    if ylims(2) >100
        ylims(2) = 100;
    end
    ylim(ylims)

save_figure(fig, [figFolder opt_list{list_idx}],fig_type);


%% Total count variables: plot the avg and err of a variable for both flies along with the temperature 
clearvars('-except',initial_var{:})
figFolder = createFolder([figDir 'timecourse/']);
[foreColor, ~] = formattingColors(blkbgd); %get background colors
LW = 1.5; %linewidth for plotting
plot_err = true; % plot the error on the graph?
fig_type = '-png';
sSpan = 1;

opt_list = {'courtship index', 'flies on food','sleep'}; 
list_idx = listdlg('promptstring','Select the variable to plot', 'ListString',opt_list,'ListSize',[200,180]);
if isempty(list_idx)
        disp('No variable selected')
        return
end  

% defaults 
multiplier = 1;
axis_dir = 'normal';

% pre-load variable specific data format
switch opt_list{list_idx}
    case 'distance to food'
        y_label = [opt_list{list_idx} ' (mm)'];
        axis_dir = 'reverse';
        d_type = 2; % M F separate
        d_name = 'dist2food';
    case 'inter-fly-distance'
        y_label = [opt_list{list_idx} ' (mm)'];
        d_type = 1; % combined MF
        d_name = 'IFD';
    case 'courtship index'
        y_label = opt_list{list_idx};
        d_type = 1; % combined MF
        d_name = 'CI';
    case 'flies on food'
        y_label = opt_list{list_idx};
        d_type = 2; % M F separate
        d_name = 'FlyOnFood';
    case 'eccentricity'
        y_label = [opt_list{list_idx} ' (mm)'];
        d_type = 2; % M F separate
        d_name = opt_list{list_idx};
    case 'food quadrant'
        y_label = [opt_list{list_idx} ' (%)'];
        d_type = 2; % M F separate
        d_name = 'foodQuad';
        multiplier = 100;
    case 'food circle'
        y_label = [opt_list{list_idx} ' (%)'];
        d_type = 2; % M F separate
        d_name = 'foodcircle';
        multiplier = 100;
    case 'outer ring'
        y_label = [opt_list{list_idx} ' (%)'];
        d_type = 2; % M F separate
        d_name = 'OutterRing';
        multiplier = 100;
    case 'turning'
        y_label = [opt_list{list_idx} ' (mm/s)'];
        d_type = 2; % M F separate
        d_name = opt_list{list_idx};
    case 'sleep'
        y_label = [opt_list{list_idx} ' (%)'];
        d_type = 2; % M F separate
        d_name = opt_list{list_idx};
end

% set up figure aligments
r = 5; %rows
c = 3; %columns
sb(1).idx = [1,2]; %temp timecourse
sb(2).idx = [4,5,7,8,10,11,13,14]; % variable to examine timecourse
sb(3).idx = 3:c:r*c; % temp binned variable alignment

fig = getfig('',1);
% temperature time course
subplot(r,c,sb(1).idx); hold on
x = data.time;
y = data.temp;
plot(x,y,'color', foreColor, 'linewidth',LW)
% TODO: update this code to load and parse the data correctly for diff
% sized data structures (e.g., 2 flies vs. single column)  
raw_data = data.(d_name);

% time course of variable
subplot(r,c,sb(2).idx); hold on
x = data.time;
switch d_type
    case 1 % single value for M & F
            y_all = raw_data;
            y_avg = smooth(sum(y_all,2,'omitnan'),sSpan,'moving').*multiplier;
            plot(x,y_avg,'color',foreColor,'linewidth',LW+1)
    case 2 % separate values for M & F 
        for sex = 1:2
            y_all = squeeze(raw_data(:,sex,:));
            y_avg = smooth(sum(y_all,2,'omitnan'),sSpan,'moving').*multiplier;
            plot(x,y_avg,'color',data.color(sex,:),'linewidth',LW+1)
        end
end

%temp dependent variable
subplot(r,c,sb(3).idx); hold on
x = data.tempbin.temps;
    for sex = 1:2
        % setup the data for extraction
        if d_type==1
            y_all = raw_data;
            kolor = foreColor;
        else
            y_all = squeeze(raw_data(:,sex,:));
            kolor = data.color(sex,:);
        end
        if d_type==1 && sex==2
            continue
        end
        %extract data
        [c_avg,w_avg,c_err,w_err] = deal([]);
        for t = 1:length(x)
            % cooling
            loc = data.tempbin.cooling(:,t);
            y_sel = sum(y_all(loc,:),1,'omitnan').*multiplier;
            c_avg(t) = sum(y_sel,'omitnan');
            % c_err(t) = std(y_sel, 0,2,'omitnan');
            % warming
            loc = data.tempbin.warming(:,t);
            y_sel = sum(y_all(loc,:),1,'omitnan').*multiplier;
            w_avg(t) = sum(y_sel,'omitnan');
            % w_err(t) = std(y_sel, 0,2,'omitnan');
            % % cooling
            % loc = data.tempbin.cooling(:,t);
            % y_sel = mean(squeeze(raw_data(loc,sex,:)),1,'omitnan');
            % c_avg(t) = mean(y_sel,'omitnan');
            % c_err(t) = std(y_sel, 0,2,'omitnan');
            % % warming
            % loc = data.tempbin.warming(:,t);
            % y_sel = mean(squeeze(raw_data(loc,sex,:)),1,'omitnan');
            % w_avg(t) = mean(y_sel,'omitnan');
            % w_err(t) = std(y_sel, 0,2,'omitnan');
        end
        % plot data
        % plot_error_fills(plot_err, x, c_avg, c_err, kolor,fig_type);
        % plot_error_fills(plot_err, x, w_avg, c_err, kolor,fig_type);
        plot(x,c_avg,'color',kolor,'linewidth',LW+1,'LineStyle','--')
        plot(x,w_avg,'color',kolor,'linewidth',LW+1,'LineStyle','-')
    end

% format figure: 
formatFig(fig, blkbgd, [r,c],sb);
subplot(r,c,sb(1).idx);
    set(gca, 'xcolor', 'none')
    ylabel('\circC')
subplot(r,c,sb(2).idx);    
    ylabel(y_label)
    xlabel('time (min)')
    set(gca, 'YDir',axis_dir)
subplot(r,c,sb(3).idx);
    ylabel(y_label)
    xlabel('temp (\circC)')
    set(gca, 'YDir',axis_dir)

save_figure(fig, [figFolder opt_list{list_idx}],fig_type);


%% Courtship frequency figure: TODO-check that this is aligned time! 
clearvars('-except',initial_var{:})
% when and where is the concentration of courtship over experimental time?
[foreColor, ~] = formattingColors(blkbgd); % get background colors
sex = 1;
% compile the data: 
[pD(1).x, pD(2).x, pD(1).y,pD(2).y] = deal([]);
for i = 1:num.trials
    % for sex = 1:2
        x = fly(i).time;
        y = fly(i).T.CI;
        pD(sex).x = [pD(sex).x, x];
        pD(sex).y = [pD(sex).y, y];
    % end
end

% set up figure aligments
r = 5; %rows
c = 3; %columns
sb(1).idx = [1,2]; %temp timecourse
sb(2).idx = [4,5,7,8,10,11,13,14];
sb(3).idx = 3:c:r*c; %binned distance alignment
LW = 1;

fig = getfig('',0); 

subplot(r,c,sb(1).idx);
hold on
for i = 1:num.trials
    x = fly(i).time;
    y = fly(i).T.temperature;
    plot(x,y,'color', foreColor,'LineWidth', LW)
end
ylabel('temp (\circC)')

subplot(r,c,sb(2).idx);
hold on
for sex = 1:2
    x = mean(pD(sex).x,2);
    y = sum(pD(sex).y,2);
    plot(x,smooth(y,5*60,'moving'),'color', foreColor,'LineWidth',LW)
end
xlabel('time (min)')
ylabel('courtship index sum')

formatFig(fig,blkbgd,[r,c],sb);
subplot(r,c,sb(1).idx);
set(gca, 'xcolor', 'none')



%% Courtship Index: 
% TODO: update this to work with the current data...
clearvars('-except',initial_var{:})
% when and where is the concentration of courtship over experimental time?
[foreColor, ~] = formattingColors(blkbgd); %get background colors

% compile the data: 
[pD(1).x, pD(2).x, pD(1).y,pD(2).y] = deal([]);
for i = 1:num.trials
    sex = 1;
    % for sex = 1:2
        x = fly(i).time;
        y = fly(i).T.CI;
        pD(sex).x = [pD(sex).x, x];
        pD(sex).y = [pD(sex).y, y];
    % end
end

% set up figure aligments
r = 5; %rows
c = 3; %columns
sb(1).idx = [1,2]; %temp timecourse
sb(2).idx = [4,5,7,8,10,11,13,14];
sb(3).idx = 3:c:r*c; %binned distance alignment
LW = 1;

fig = getfig('',1); 

subplot(r,c,sb(1).idx);
hold on
for i = 1:num.trials
    x = fly(i).time;
    y = fly(i).T.temperature;
    plot(x,y,'color', foreColor,'LineWidth', LW)
end
ylabel('temp (\circC)')

subplot(r,c,sb(2).idx);
hold on
for sex = 1:2
    x = mean(pD(sex).x,2);
    y = sum(pD(sex).y,2);
    plot(x,smooth(y,5*60,'moving'),'color', foreColor,'LineWidth',lw)
end
xlabel('time (min)')
ylabel('courtship index sum')

formatFig(fig,blkbgd,[r,c],sb);
subplot(r,c,sb(1).idx);
set(gca, 'xcolor', 'none')

%% TODO: group behavior state transition map

%% TODO:  grouped Courtship behavior frequency time course
clearvars('-except',initial_var{:})
[foreColor, ~] = formattingColors(blkbgd); %get background colors
kolor = Color('gold');
% simple plot of when the different courtship behaviors are happening
r = 5;
c = 1;
lw = 2;

time = mean(data.time,2,'omitnan');
temp = mean(data.temperature,2,'omitnan');

fig = getfig('',0);
% time
subplot(r,c,1); hold on 
% x = data.time;
% y = data.temp;
% plot(x,y,'color', foreColor, 'linewidth', lw)
% ylabel('\circC')
plot(time, temp,'color', foreColor, 'linewidth', lw)
ylabel('\circC')

% full courtship index
subplot(r,c,2); hold on 
    x = time;
    y = sum(data.CI,2);
    plot(x,y,'color', foreColor, 'linewidth', lw)
    ylabel('CI')

% wing extension
subplot(r,c,3); hold on 
    x = time;
    y = sum(data.wing_ext_all,2);
    plot(x,y,'color', foreColor, 'linewidth', lw)
    y = sum(data.wing_ext,2);
    plot(x,y,'color', kolor, 'linewidth', lw)
    ylabel('wing ext')

% chasing
subplot(r,c,4); hold on 
    x = time;
    y = sum(data.chase_all,2);
    plot(x,y,'color', foreColor, 'linewidth', lw)
    y = sum(data.court_chase,2);
    plot(x,y,'color', kolor, 'linewidth', lw)
    ylabel('chase')

% circling
subplot(r,c,5); hold on 
    x = time;
    y = sum(data.circling_all,2);
    plot(x,y,'color', foreColor, 'linewidth', lw)
    y = sum(data.circling_1sec,2);
    plot(x,y,'color', kolor, 'linewidth', lw)
    ylabel('circling')
    xlabel('time (min)')

% formating: 
formatFig(fig, blkbgd,[r,c]);
trans = [data.cooling_idx, data.warming_idx(2)];
for i = 1:r
    subplot(r,c,i)
    v_line(data.time(trans),'r', '-',1)
    if i<r
        set(gca, 'xcolor', 'none')
    end
end

save_figure(fig, [figDir 'courtship behaviors over time'],fig_type);


%% TODO: behavior probabilities for states that happen before sleep & how long it took between them...
clearvars('-except',initial_var{:})
[foreColor, ~] = formattingColors(blkbgd); %get background colors

% what is the behavior that happened just prior to sleep and how long ago
% did it happen?
[behavior_next, behavior_last] = deal([]);
index = 1;
for i = 1:num.trials
    for sex = 1:2
        loc = find(diff(data.sleep(:,sex,i))==1)+1;  % frame number of when sleep starts
        sleep_off = find(diff(data.sleep(:,sex,i))==-1);
        % behavior comparisions
        if ~isempty(loc)
            for sleep = 1:length(loc)
                % last behavior that happened before sleep
                outRing_last = find(data.OutterRing(1:loc(sleep),sex,i), 1, 'last' ); % outer ring 
                outRing_last = empty2nan(outRing_last);
                onFood_last = find(data.FlyOnFood(1:loc(sleep),sex,i), 1, 'last' ); % on food
                onFood_last = empty2nan(onFood_last);
                if sex==1
                    courtship_last = find(data.FlyOnFood(1:loc(sleep),sex,i), 1, 'last' ); % on food
                    courtship_last = empty2nan(courtship_last);
                else
                    courtship_last = nan;
                end
                [frame_last, idx_last] = max([outRing_last, onFood_last, courtship_last]);
                %save into large matrix
                behavior_last(index,:) = [i, loc(sleep), idx_last, frame_last, outRing_last, onFood_last, courtship_last];

                % next behavior that happened after sleep
                outRing_next = find(data.OutterRing(sleep_off(sleep)+1:end,sex,i), 1, 'first' )+sleep_off(sleep)+1; % outer ring 
                outRing_next = empty2nan(outRing_next);
                onFood_next = find(data.FlyOnFood(sleep_off(sleep)+1:end,sex,i), 1, 'first' )+sleep_off(sleep)+1; % on food
                onFood_next = empty2nan(onFood_next);
                if sex==1
                    courtship_next = find(data.FlyOnFood(sleep_off(sleep)+1:end,sex,i), 1, 'first' )+sleep_off(sleep)+1; % on food
                    courtship_next = empty2nan(courtship_next);
                else
                    courtship_next = nan;
                end
                [frame_next, idx_next] = min([outRing_next, onFood_next, courtship_next]);
                %save into large matrix
                behavior_next(index,:) = [i, sleep_off(sleep), idx_next, frame_next, outRing_next, onFood_next, courtship_next];
                
                % increase the matrix count: 
                index = index+1;
            end
        end
    end
    disp(i)
end

% figure -- what were the last and next behaviors?
time_to_sleep = ((behavior_last(:,2)-behavior_last(:,5:7))./fly(1).fps)./60; % in minutes
time_since_sleep = ((behavior_next(:,5:7) - behavior_next(:,2))./fly(1).fps)./60; % in minutes

beh_list = {'outer ring', 'food', 'courtship'};

fig = getfig('',0);
subplot(1,2,1); hold on
    x = repmat([1,2,3],[size(time_to_sleep,1),1]);
    plot(x', time_to_sleep')
    scatter(x, time_to_sleep,35,foreColor,'filled')
    xlim([0,4])
    set(gca, 'xtick', 1:3,'xticklabel', beh_list)
    ylabel('time from last behavior to sleep (min)')
    title('Previous Behavior')
subplot(1,2,2); hold on
    x = repmat([1,2,3],[size(time_since_sleep,1),1]);
    plot(x', time_since_sleep')
    scatter(x, time_since_sleep,35,foreColor,'filled')
    xlim([0,4])
    set(gca, 'xtick', 1:3,'xticklabel', beh_list)
    ylabel('time to next behavior after sleep (min)')
    title('Subsequent Behavior')
formatFig(fig, blkbgd,[1,2]);

save_figure(fig, [figDir 'behaviors before and after sleep'],fig_type);

%% TODO: add a frequency scatter plot that shows the number of instances per temperature region
clearvars('-except',initial_var{:})
[foreColor, ~] = formattingColors(blkbgd); %get background colors

temp_regimes = {'hold', 'cooling', 'warming', 'hold'};
ntypes = length(temp_regimes);
data_type = 'CI';

% data_type = 'wing_ext_all';
% data_type = 'chase_all';

% Extract data for plotting
plotData = [];
for t = 1:ntypes
    switch t
        case 1 % hold
            t_name = 'pre hold';
            idx = 1:data.cooling_idx(1)-1;
        case 2 % cooling
            t_name = 'cooling';
            idx = data.cooling_idx(1):data.cooling_idx(2);
        case 3 % warming
            t_name = 'warming';
            idx = data.warming_idx(1):data.warming_idx(2);
        case 4 % post hold
            t_name = 'post hold';
            idx = data.warming_idx(2)+1:length(data.temp);
    end
    
    % have some switch mechanism here to look at different types of parameters
    raw_data = data.(data_type);
    
    y_raw = sum(raw_data(idx,:),'omitnan');
    y = y_raw./(length(idx)/(fly(1).fps*60)); % instances per minute
    
    plotData(t,:) = y;
end

% Visualize Data:
buff = 0.2;
avg_buff = 0.3;
sz = 60;
lw = 2;
cList = {'grey', 'dodgerblue', 'red', 'grey'};

fig = getfig('',1,[547 526]);
hold on
for t = 1:ntypes
    x = shuffle_data(linspace(t-buff,t+buff,num.trials));
    y = plotData(t,:);
    scatter(x,y,sz, Color(cList{t}), "filled")
    x = [t-avg_buff, t+avg_buff];
    y_mean = mean(y, 'omitnan');
    plot(x,[y_mean, y_mean],"Color",foreColor, 'linewidth', lw)
    y_err = std(y, 'omitnan')/num.trials;
    y_sem = [y_mean-y_err, y_mean+y_err];
    plot(x,[y_sem(1), y_sem(1)], 'Color',foreColor, 'linewidth', 0.5, 'linestyle', '--')
    plot(x,[y_sem(2), y_sem(2)], 'Color',foreColor, 'linewidth', 0.5, 'linestyle', '--')
end
set(gca, 'xtick', 1:ntypes,'xticklabel', temp_regimes)
ylabel([strrep(data_type,'_', '-') ' frequency (#/min)'])
formatFig(fig, blkbgd);
save_figure(fig, [figDir 'temp regime binned frequency of ' data_type],fig_type);

% run statistical tests: are they different? 
statData = plotData';
[p,tbl,stats] = kruskalwallis(statData,[],'off');
fig2 = getfig('', 1, [633 580]);
c = multcompare(stats);
tble = array2table(c,"VariableNames", ...
    ["Group A","Group B","Lower Limit","A-B","Upper Limit","P-value"])
formatFig(fig2, blkbgd);

%% TODO: duration on food across different temperatures
% Question: when are the flies going onto the food and how long are they staying
% there? How does this change for different temperature regimes?
clearvars('-except',initial_var{:})
[foreColor, ~] = formattingColors(blkbgd); %get background colors

temp_regimes = {'hold', 'cooling', 'warming', 'hold'};
ntypes = length(temp_regimes);
% data_type = 'CI';
% data_type = 'wing_ext';
% data_type = 'chase_all';
data_type = 'FlyOnFood';

% Extract data for plotting
plotData = [];
for t = 1:ntypes
    switch t
        case 1 % hold
            t_name = 'pre hold';
            idx = 1:data.cooling_idx(1)-1;
        case 2 % cooling
            t_name = 'cooling';
            idx = data.cooling_idx(1):data.cooling_idx(2);
        case 3 % warming
            t_name = 'warming';
            idx = data.warming_idx(1):data.warming_idx(2);
        case 4 % post hold
            t_name = 'post hold';
            idx = data.warming_idx(2)+1:length(data.temp);
    end

    % have some switch mechanism here to look at different types of parameters
    raw_data = data.(data_type);
    
    
    y_raw = sum(raw_data(idx,:),'omitnan');
    y = y_raw./(length(idx)/(fly(1).fps*60)); % instances per minute
    
    plotData(t,:) = y;
end

% Visualize Data:
buff = 0.2;
avg_buff = 0.3;
sz = 60;
lw = 2;
cList = {'grey', 'dodgerblue', 'red', 'grey'};

fig = getfig('',1,[547 526]);
hold on
for t = 1:ntypes
    x = shuffle_data(linspace(t-buff,t+buff,num.trials));
    y = plotData(t,:);
    scatter(x,y,sz, Color(cList{t}), "filled")
    x = [t-avg_buff, t+avg_buff];
    y_mean = mean(y, 'omitnan');
    plot(x,[y_mean, y_mean],"Color",foreColor, 'linewidth', lw)
    y_err = std(y, 'omitnan')/num.trials;
    y_sem = [y_mean-y_err, y_mean+y_err];
    plot(x,[y_sem(1), y_sem(1)], 'Color',foreColor, 'linewidth', 0.5, 'linestyle', '--')
    plot(x,[y_sem(2), y_sem(2)], 'Color',foreColor, 'linewidth', 0.5, 'linestyle', '--')
end
set(gca, 'xtick', 1:ntypes,'xticklabel', temp_regimes)
ylabel([strrep(data_type,'_', '-') ' frequency (#/min)'])
formatFig(fig, blkbgd);
save_figure(fig, [figDir 'temp regime binned frequency of ' data_type],fig_type);

%% TODO: Singly fly number of trips to food during each temperature region & duration of that 'visit'

%% FIGURE: rasterplot of frequency of courtship-like events over the timecourse


% bin by time?

% look at the total number for each group...

% bin by 1 minute increments

fps = fly(1).fps;
binWidth = 1; % seconds

binedges = 1:binWidth*fps:size(data.time,1);
pD = [];
[pD.wingext, pD.chase, pD.circling, pD.CI, pD.temp,pD.time] = deal(nan(length(binedges)-1,1));
for i = 1:length(binedges)-1
    roi = binedges(i):binedges(i+1);
    pD.wingext(i) = sum(sum(data.wing_ext_all(roi,:),'omitnan'),'omitnan');
    pD.chase(i) = sum(sum(data.chase_all(roi,:),'omitnan'),'omitnan');
    pD.circling(i) = sum(sum(data.circling_all(roi,:),'omitnan'),'omitnan');
    pD.CI(i) = sum(sum(data.CI(roi,:),'omitnan'),'omitnan');
    pD.temp(i) = mean(data.temp(roi),'omitnan');
    pD.time(i) = mean(data.time(roi),'omitnan');
end
% turn these into rates
params = {'chase', 'circling', 'wingext'};
sSpan = 10;
for i = 1:length(params)
    pD.(params{i}) = (pD.(params{i})./binWidth)./num.trials;
    pD.(params{i}) = smooth(pD.(params{i}),sSpan,'moving');
end


r = 7;
c = 1;
sb(1).idx = 1;
sb(2).idx = 2:3;
sb(3).idx = 4:5;
sb(4).idx = 6:7;

LW = 1;
params = {'temp', 'chase', 'circling', 'wingext'};

fig = getfig('',1,[665 680]);
for i = 1:length(params)
    subplot(r,c,sb(i).idx)
    plot(pD.time, pD.(params{i}),'color', Color('black'),'linewidth', LW)
    ylabel([params{i} ' (hz)'])
end
formatFig(fig, blkbgd,[r c],sb);
for i = 1:length(params)-1
    subplot(r,c,sb(i).idx)
    set(gca,'xcolor','none')
end
save_figure(fig, [figDir 'courstship measures over time'],'-pdf');


% Temp region summaries:
tROI = [1,989; 990 1959; 1960 2934; 2935 3839]; % hold, cooling, warming, hold
figure; 
plot(pD.temp)
v_line(tROI)

PD = [];
for t = 1:4 % hold, cooling, warming, hold
    for i = 2:4 % params other than temp
        PD(t,i-1) = sum(pD.(params{i})(tROI(t,1):tROI(t,2)),'omitnan')./(tROI(t,2)-tROI(t,1));
    end
end


cData = [Color('grey'); Color('dodgerblue'); Color('red'); Color('grey')];
n = 3;
fig = getfig('',0); 
for i = 1:n
    subplot(1,n,i)
    h = bar(PD(:,i));
    h.FaceColor = 'flat';
    h.CData = cData;

    ylabel([params{i+1} ' (hz)'])
end
formatFig(fig,blkbgd,[1,n])
for i = 1:n
    subplot(1,n,i)
    set(gca, 'xcolor', 'none')
end
save_figure(fig, [figDir 'courstship measures avg over temp region'],'-pdf');


%% Trial by trial comparision of the different courtship measures 
clearvars('-except',initial_var{:})

% UPDATE THIS FOR NOT LTS: 
data.temp = mean(data.temperature,2,'omitnan');

% bin by 1 minute increments

fps = fly(1).fps;
binWidth = 1; % seconds

binedges = 1:binWidth*fps:size(data.time,1);
pD = [];
[pD.wingext, pD.chase, pD.circling, pD.CI] = deal(nan(length(binedges)-1,num.trials));
[pD.temp,pD.time] = deal(nan(length(binedges)-1,1));

for i = 1:length(binedges)-1
    roi = binedges(i):binedges(i+1);
    pD.wingext(i,:) = (sum(data.wing_ext_all(roi,:),1,'omitnan'));
    pD.chase(i,:) = (sum(data.chase_all(roi,:),1,'omitnan'));
    pD.circling(i,:) = (sum(data.circling_all(roi,:),1,'omitnan'));
    pD.CI(i,:) = (sum(data.CI(roi,:),1,'omitnan'));
    pD.temp(i) = mean(mean(data.temp(roi),'omitnan'));
    pD.time(i) = mean(mean(data.time(roi),'omitnan'));
end
% turn these into rates
params = {'chase', 'circling', 'wingext'};
sSpan = 10;
for i = 1:length(params)
    pD.(params{i}) = (pD.(params{i})./binWidth)./num.trials;
    % pD.(params{i}) = smooth(pD.(params{i}),sSpan,'moving');
end

% Temp region summaries:
tROI = [1,989; 990 1959; 1960 2934; 2935 3839]; % hold, cooling, warming, hold
figure; 
plot(pD.temp)
v_line(tROI)

% Bin the data for each of the temp epochs
PD = [];
for t = 1:4 % hold, cooling, warming, hold
    for i = 1:3 % params other than temp
        PD(t,1:num.trials,i) = sum(pD.(params{i})(tROI(t,1):tROI(t,2),:),'omitnan')./(tROI(t,2)-tROI(t,1));
    end
end

% FIGURE: visualize courtship measures for each of the trials
r = 1;
c = 3;
sz = 30;
kolor = {'grey', 'dodgerblue', 'red', 'grey'};

fig = getfig('', 0);
    for i = 1:c
        subplot(r,c,i); hold on
        for t = 1:4
            x = t*ones(1,num.trials);
            y = PD(t,:,i);
            scatter(x,y,sz, Color(kolor{t}),'filled','XJitter','density')
            y_avg = mean(y,'omitnan');
            plot([t-0.3,t+0.3],[y_avg, y_avg],'color', Color(kolor{t}),'linewidth', 2)
        end
        title(params{i})
    end
    formatFig(fig, blkbgd,[r,c]);
    for i = 1:c
        subplot(r,c,i); hold on
        set(gca, 'xcolor', 'none')
    end

gNames = [ones(num.trials,1),2*ones(num.trials,1),3*ones(num.trials,1),4*ones(num.trials,1)];
% STATS:
stats = [];
for i = 1:c
    inputData = squeeze(PD(:,:,i)');
    [~,~,stats(i).s] = anova1(inputData);
    alpha = 0.05; %significance level
    [stats(i).c,~,~,~] = multcompare(stats(i).s,alpha,'off');
end

% so far not 


%% 

%% FIGURE:  plot major components of courtship behavior over time just raw numbers
clearvars('-except',initial_var{:})
[foreColor, ~] = formattingColors(blkbgd); %get background colors
kolor = Color('gold');

% simple plot of when the different courtship behaviors are happening
r = 5;
c = 1;
lw = 2;
sSpan = 60*30; % 1 min smoothing bin for the Courtship Index in time

time = mean(data.time,2,'omitnan');
temp = mean(data.temperature,2,'omitnan');

fig = getfig('',0);
% time
subplot(r,c,1); hold on 
% x = data.time;
% y = data.temp;
% plot(x,y,'color', foreColor, 'linewidth', lw)
% ylabel('\circC')
plot(time, temp,'color', foreColor, 'linewidth', lw)
ylabel('\circC')

% full courtship index
subplot(r,c,2); hold on 
    x = time;
    y = sum(data.CI,2);
    y1 = smooth(y,sSpan, 'moving');
    plot(x,y,'color', foreColor, 'linewidth', lw)
    ylabel('CI')
    yyaxis right
    plot(x,y1,'color', Color('dodgerblue'), 'linewidth', lw)
    ylabel('CI minute avg')

% wing extension
subplot(r,c,3); hold on 
    x = time;
    y = sum(data.wing_ext_all,2);
    y1 = smooth(y,sSpan, 'moving');
    plot(x,y,'color', foreColor, 'linewidth', lw)
    y = sum(data.wing_ext,2);
    plot(x,y,'color', kolor, 'linewidth', lw)
    ylabel('wing ext')
    yyaxis right
    plot(x,y1,'color', Color('dodgerblue'), 'linewidth', lw)

% chasing
subplot(r,c,4); hold on 
    x = time;
    y = sum(data.chase_all,2);
    y1 = smooth(y,sSpan, 'moving');
    plot(x,y,'color', foreColor, 'linewidth', lw)
    y = sum(data.court_chase,2);
    plot(x,y,'color', kolor, 'linewidth', lw)
    ylabel('chase')
    yyaxis right
    plot(x,y1,'color', Color('dodgerblue'), 'linewidth', lw)

% circling
subplot(r,c,5); hold on 
    x = time;
    y = sum(data.circling_all,2);
    y1 = smooth(y,sSpan, 'moving');
    plot(x,y,'color', foreColor, 'linewidth', lw)
    y = sum(data.circling_1sec,2);
    plot(x,y,'color', kolor, 'linewidth', lw)
    ylabel('circling')
    xlabel('time (min)')
    yyaxis right
    plot(x,y1,'color', Color('dodgerblue'), 'linewidth', lw)

% formating: 
formatFig(fig, blkbgd,[r,c]);
% plot the transition points between heating/cooling regimes...
% trans = [data.cooling_idx, data.warming_idx(2)];
for i = 1:r
    subplot(r,c,i)
    % v_line(data.time(trans),'r', '-',1)
    if i<r
        set(gca, 'xcolor', 'none')
    end
end

save_figure(fig, [figDir 'courtship behaviors over time'],fig_type);

%% FIGURE:  plot SMOOTHED avg major components of courtship behavior over time
clearvars('-except',initial_var{:})
[foreColor, ~] = formattingColors(blkbgd); %get background colors
kolor = Color('dodgerblue');

% simple plot of when the different courtship behaviors are happening
r = 5;
c = 1;
lw = 2;
sSpan = 60*30; % 1 min smoothing bin for the Courtship Index in time

time = mean(data.time,2,'omitnan');
temp = mean(data.temperature,2,'omitnan');

fig = getfig('',0);
% time
subplot(r,c,1); hold on 
% x = data.time;
% y = data.temp;
% plot(x,y,'color', foreColor, 'linewidth', lw)
% ylabel('\circC')
plot(time, temp,'color', foreColor, 'linewidth', lw)
ylabel('\circC')

% full courtship index
subplot(r,c,2); hold on 
    x = time;
    y = mean(data.CI,2,'omitnan');
    y1 = smooth(y,sSpan, 'moving');
    % plot(x,y,'color', foreColor, 'linewidth', lw)
    % ylabel('CI')
    plot(x,y1,'color', kolor, 'linewidth', lw)
    ylabel('CI min avg')

% wing extension
subplot(r,c,3); hold on 
    x = time;
    y = mean(data.wing_ext_all,2,'omitnan');
    y1 = smooth(y,sSpan, 'moving');
    % plot(x,y,'color', foreColor, 'linewidth', lw)
    % y = sum(data.wing_ext,2);
    % plot(x,y,'color', kolor, 'linewidth', lw)
    ylabel('wing ext')
    % yyaxis right
    plot(x,y1,'color', kolor, 'linewidth', lw)

% chasing
subplot(r,c,4); hold on 
    x = time;
    y = mean(data.chase_all,2,'omitnan');
    y1 = smooth(y,sSpan, 'moving');
    % plot(x,y,'color', foreColor, 'linewidth', lw)
    % y = sum(data.court_chase,2);
    % plot(x,y,'color', kolor, 'linewidth', lw)
    ylabel('chase')
    % yyaxis right
    plot(x,y1,'color', kolor, 'linewidth', lw)

% circling
subplot(r,c,5); hold on 
    x = time;
    y = mean(data.circling_all,2,'omitnan');
    y1 = smooth(y,sSpan, 'moving');
    % plot(x,y,'color', foreColor, 'linewidth', lw)
    % y = sum(data.circling_1sec,2);
    % plot(x,y,'color', kolor, 'linewidth', lw)
    ylabel('circling')
    xlabel('time (min)')
    % yyaxis right
    plot(x,y1,'color', kolor, 'linewidth', lw)

% formating: 
formatFig(fig, blkbgd,[r,c]);
% plot the transition points between heating/cooling regimes...
% trans = [data.cooling_idx, data.warming_idx(2)];
for i = 1:r
    subplot(r,c,i)
    % v_line(data.time(trans),'r', '-',1)
    if i<r
        set(gca, 'xcolor', 'none')
    end
end

save_figure(fig, [figDir 'courtship behaviors smoothed over time'],fig_type);

%% Figure: scatter plot the total quantity of courtship for each pair of flies
clearvars('-except',initial_var{:})

SZ = 40;
kolor = Color('dodgerblue');
startX = 1;
stopX = 2;
buff = 0.5;
xlimits = [startX-1, stopX+1];
LW = 2;

x = shuffle_data(linspace(startX,stopX,num.trials));

fieldList = {'CI', 'wing_ext_all', 'chase_all', 'circling_all'};
ylabList = {'CI', 'wing extension', 'chase', 'circling'};
ylimits = [7 4 25 3.5];
r = 1;
c = length(fieldList);

fig = getfig('',0);

for i = 1:c
subplot(r,c,i); hold on 
    y = sum(data.(fieldList{i}),1,'omitnan');
    y = (y./fps)./60; % how many minutes of behavior was there
    scatter(x, y, SZ, kolor,'filled')
    plot([startX-buff, stopX+buff], [mean(y), mean(y)],'color', kolor,'linewidth', LW)
    xlim(xlimits)
    ylabel(['total ' ylabList{i} ' (min)'])
end
formatFig(fig, blkbgd,[r c]);
for i = 1:c
    subplot(r,c,i)
    set(gca, 'xcolor', 'none')
    ylim([0, ylimits(i)])
end

save_figure(fig, [figDir 'total time for each behavior'],fig_type);

%% TODO: Plot out the trajectories of the flies from before to after they visit the food
% define the time periods that want to be plotted before and after the food visit

clearvars('-except',initial_var{:})
fps =  fly(M).fps;

preD = 15; % pre period to plot in seconds
postD = preD; % post period to plot in seconds;
%convert to frames
preD = preD * fps; % 
postD = postD * fps; %

% how many frames can be skipped before a sustained fly on food period is ended
frameDropAllowance = ceil((1/3) * fps);  % 1/3 of a second

% find instances of the flies on the food
% test for a single fly first: 
trial = 1;
sex = M;

% find periods of sustained time on the food aka, when there are long
% periods of adjactent frames with flies on the food 
frames = find(data.FlyOnFood(:,sex,trial));
onFood = diff(frames)<=frameDropAllowance; % allow for a small gap in frames (dropped etc) [logical about 'frames']

idx = find(onFood==0); % locations where a running list of flies on food frames exceed the max skip allowance
frame_loc_stop = [frames(idx); frames(end)];
frame_loc_start = [frames(1); frames(idx+1)];

onfoodROI = [frame_loc_start, frame_loc_stop]; % frame indexes of when the fly started on the food and left the food
nOnFood = size(onfoodROI,1); % how many times is the fly on the food total in the experiment
onFoodDuration = (diff(onfoodROI,1,2))/fps; % duration of time (s) fly spent on the food

% TODO: which of these are within certain temperature regimes? 

% TODO: pull out the




figure; histogram(onFoodDuration/fps)




% set the pre and post duration 

% use time and location aligned data to plot x-y position for that duration
% zero the data to the start of the point on the food




%% TODO: What is the avg duration of a visit to the food and does it change across temps?

%% TODO: What are the speeds within each region of the arena? on avg and by temperature

%% TODO: 












































