
% Generate figures to compare different behaviors and frequencies of
% behaviors over time:


%% Simple comparison across flies: distance to food over time
clearvars('-except',initial_var{:})

% plot the data:
lw = 0.25;
sSpan = 5*fly(1).fps; %  5 second smoothing

fig = getfig('',1); hold on
for sex = 1:2
    % plot all the trials
    x = repmat(data.time, [1,num.trials]);
    y = squeeze(data.dist2food(:,sex,:));
    plot(x,y,'color', data.color(sex,:),'LineWidth',lw)
end
xlabel('time (min)')
ylabel('distance to food (mm)')
formatFig(fig);
save_figure(fig, [figDir 'test fly distance to food all trials'],fig_type)

%% plot the female and male positions within the arena ...
% TODO: need to rotate the arena to match the food alignment across trials...
[foreColor, ~] = formattingColors(blkbgd); %get background colors

a = inputdlg(['There are ' num2str(num.trials) ' figures, how many columns?']);
c = str2double(a{:});
r = ceil(num.trials/c);

% female position figure: 
fig = getfig('female fly positions in the arena', 1,[1064 774]);
for i = 1:num.trials
    subplot(r,c,i); % male position in arena
    x = fly(i).f.pos(:,body.center,1);
    y = fly(i).f.pos(:,body.center,2);
    scatter(x,y,3, data.color(F,:))
    hold on
    scatter(fly(i).well.food(1),fly(i).well.food(2),10, foreColor)
    viscircles(fly(i).well.center(5,:),30/fly(i).pix2mm,'Color',foreColor)
    axis square equal
    set(gca, 'XColor','none', 'ycolor', 'none')
end
save_figure(fig, [figDir 'female fly positions in arena'],fig_type)

% male position figure: 
fig = getfig('male fly positions in the arena', 1,[1064 774]);
for i = 1:num.trials
    subplot(r,c,i); % male position in arena
    x = fly(i).m.pos(:,body.center,1);
    y = fly(i).m.pos(:,body.center,2);
    scatter(x,y,3, data.color(M,:))
    hold on
    scatter(fly(i).well.food(1),fly(i).well.food(2),10, foreColor)
    viscircles(fly(i).well.center(5,:),30/fly(i).pix2mm,'Color',foreColor);
    axis square equal
    set(gca, 'XColor','none', 'ycolor', 'none')
end
save_figure(fig, [figDir 'male fly positions in arena'],fig_type)


%% plot the avg and err of a variable for both flies along with the temperature 
clearvars('-except',initial_var{:})
figFolder = createFolder([figDir 'timecourse/']);
[foreColor, ~] = formattingColors(blkbgd); %get background colors
LW = 1.5; %linewidth for plotting
plot_err = true; % plot the error on the graph?
fig_type = '-png';
sSpan = 5*fly(1).fps;

opt_list = {'distance to food', 'inter-fly-distance', 'eccentricity', 'food quadrant', 'food circle', 'turning','sleep','outer ring','courtship index', 'flies on food'}; 
list_idx = listdlg('promptstring','Select the variable to plot', 'ListString',opt_list,'ListSize',[200,180]);
if isempty(list_idx)
        disp('No variable selected')
        return
end  

% defaults 
multiplier = 1;
axis_dir = 'normal';

% pre-load variable specific data format
switch opt_list{list_idx}
    case 'distance to food'
        y_label = [opt_list{list_idx} ' (mm)'];
        axis_dir = 'reverse';
        d_type = 2; % M F separate
        d_name = 'dist2food';
    case 'inter-fly-distance'
        y_label = [opt_list{list_idx} ' (mm)'];
        d_type = 1; % combined MF
        d_name = 'IFD';
    case 'courtship index'
        y_label = opt_list{list_idx};
        d_type = 1; % combined MF
        d_name = 'CI';
    case 'flies on food'
        y_label = opt_list{list_idx};
        d_type = 2; % M F separate
        d_name = 'FlyOnFood';
    case 'eccentricity'
        y_label = [opt_list{list_idx} ' (mm)'];
        d_type = 2; % M F separate
        d_name = opt_list{list_idx};
    case 'food quadrant'
        y_label = [opt_list{list_idx} ' (%)'];
        d_type = 2; % M F separate
        d_name = 'foodQuad';
        multiplier = 100;
    case 'food circle'
        y_label = [opt_list{list_idx} ' (%)'];
        d_type = 2; % M F separate
        d_name = 'foodcircle';
        multiplier = 100;
    case 'outer ring'
        y_label = [opt_list{list_idx} ' (%)'];
        d_type = 2; % M F separate
        d_name = 'OutterRing';
        multiplier = 100;
    case 'turning'
        y_label = [opt_list{list_idx} ' (mm/s)'];
        d_type = 2; % M F separate
        d_name = opt_list{list_idx};
    case 'sleep'
        y_label = [opt_list{list_idx} ' (%)'];
        d_type = 2; % M F separate
        d_name = opt_list{list_idx};
        multiplier = 100;
end

% set up figure aligments
r = 5; %rows
c = 3; %columns
sb(1).idx = [1,2]; %temp timecourse
sb(2).idx = [4,5,7,8,10,11,13,14]; % variable to examine timecourse
sb(3).idx = 3:c:r*c; % temp binned variable alignment

fig = getfig('',1);
% temperature time course
subplot(r,c,sb(1).idx); hold on
x = data.time;
y = data.temp;
plot(x,y,'color', foreColor, 'linewidth',LW)
% TODO: update this code to load and parse the data correctly for diff
% sized data structures (e.g., 2 flies vs single column)  
raw_data = data.(d_name);

% time course of variable
subplot(r,c,sb(2).idx); hold on
x = data.time;
switch d_type
    case 1 % single value for M & F
            y_all = raw_data;
            y_avg = smooth(mean(y_all,2,'omitnan'),sSpan,'moving').*multiplier;
            y_err = smooth(std(y_all, 0,2,'omitnan'),sSpan,'moving').*multiplier;
            plot_error_fills(plot_err, x, y_avg, y_err, foreColor,fig_type, 0.35);
            plot(x,y_avg,'color',foreColor,'linewidth',LW+1)
    case 2 % separate values for M & F 
        for sex = 1:2
            y_all = squeeze(raw_data(:,sex,:));
            y_avg = smooth(mean(y_all,2,'omitnan'),sSpan,'moving').*multiplier;
            y_err = smooth(std(y_all, 0,2,'omitnan'),sSpan,'moving').*multiplier;
            plot_error_fills(plot_err, x, y_avg, y_err, data.color(sex,:),fig_type, 0.35);
            plot(x,y_avg,'color',data.color(sex,:),'linewidth',LW+1)
        end
end

%temp dependent variable
subplot(r,c,sb(3).idx); hold on
x = data.tempbin.temps;
    for sex = 1:2
        % setup the data for extraction
        if d_type==1
            y_all = raw_data;
            kolor = foreColor;
        else
            y_all = squeeze(raw_data(:,sex,:));
            kolor = data.color(sex,:);
        end
        if d_type==1 && sex==2
            continue
        end
        %extract data
        [c_avg,w_avg,c_err,w_err] = deal([]);
        for t = 1:length(x)
            % cooling
            loc = data.tempbin.cooling(:,t);
            y_sel = mean(y_all(loc,:),1,'omitnan').*multiplier;
            c_avg(t) = mean(y_sel,'omitnan');
            c_err(t) = std(y_sel, 0,2,'omitnan');
            % warming
            loc = data.tempbin.warming(:,t);
            y_sel = mean(y_all(loc,:),1,'omitnan').*multiplier;
            w_avg(t) = mean(y_sel,'omitnan');
            w_err(t) = std(y_sel, 0,2,'omitnan');
            % % cooling
            % loc = data.tempbin.cooling(:,t);
            % y_sel = mean(squeeze(raw_data(loc,sex,:)),1,'omitnan');
            % c_avg(t) = mean(y_sel,'omitnan');
            % c_err(t) = std(y_sel, 0,2,'omitnan');
            % % warming
            % loc = data.tempbin.warming(:,t);
            % y_sel = mean(squeeze(raw_data(loc,sex,:)),1,'omitnan');
            % w_avg(t) = mean(y_sel,'omitnan');
            % w_err(t) = std(y_sel, 0,2,'omitnan');
        end
        % plot data
        plot_error_fills(plot_err, x, c_avg, c_err, kolor,fig_type);
        plot_error_fills(plot_err, x, w_avg, c_err, kolor,fig_type);
        plot(x,c_avg,'color',kolor,'linewidth',LW+1,'LineStyle','--')
        plot(x,w_avg,'color',kolor,'linewidth',LW+1,'LineStyle','-')
    end

% format figure: 
formatFig(fig, blkbgd, [r,c],sb);
subplot(r,c,sb(1).idx);
    set(gca, 'xcolor', 'none')
    ylabel('\circC')
subplot(r,c,sb(2).idx);    
    ylabel(y_label)
    xlabel('time (min)')
    set(gca, 'YDir',axis_dir)
subplot(r,c,sb(3).idx);
    ylabel(y_label)
    xlabel('temp (\circC)')
    set(gca, 'YDir',axis_dir)

save_figure(fig, [figFolder opt_list{list_idx}],fig_type);


%% Total count variables: plot the avg and err of a variable for both flies along with the temperature 
clearvars('-except',initial_var{:})
figFolder = createFolder([figDir 'timecourse/']);
[foreColor, ~] = formattingColors(blkbgd); %get background colors
LW = 1.5; %linewidth for plotting
plot_err = true; % plot the error on the graph?
fig_type = '-png';
sSpan = 1;

opt_list = {'courtship index', 'flies on food','sleep'}; 
list_idx = listdlg('promptstring','Select the variable to plot', 'ListString',opt_list,'ListSize',[200,180]);
if isempty(list_idx)
        disp('No variable selected')
        return
end  

% defaults 
multiplier = 1;
axis_dir = 'normal';

% pre-load variable specific data format
switch opt_list{list_idx}
    case 'distance to food'
        y_label = [opt_list{list_idx} ' (mm)'];
        axis_dir = 'reverse';
        d_type = 2; % M F separate
        d_name = 'dist2food';
    case 'inter-fly-distance'
        y_label = [opt_list{list_idx} ' (mm)'];
        d_type = 1; % combined MF
        d_name = 'IFD';
    case 'courtship index'
        y_label = opt_list{list_idx};
        d_type = 1; % combined MF
        d_name = 'CI';
    case 'flies on food'
        y_label = opt_list{list_idx};
        d_type = 2; % M F separate
        d_name = 'FlyOnFood';
    case 'eccentricity'
        y_label = [opt_list{list_idx} ' (mm)'];
        d_type = 2; % M F separate
        d_name = opt_list{list_idx};
    case 'food quadrant'
        y_label = [opt_list{list_idx} ' (%)'];
        d_type = 2; % M F separate
        d_name = 'foodQuad';
        multiplier = 100;
    case 'food circle'
        y_label = [opt_list{list_idx} ' (%)'];
        d_type = 2; % M F separate
        d_name = 'foodcircle';
        multiplier = 100;
    case 'outer ring'
        y_label = [opt_list{list_idx} ' (%)'];
        d_type = 2; % M F separate
        d_name = 'OutterRing';
        multiplier = 100;
    case 'turning'
        y_label = [opt_list{list_idx} ' (mm/s)'];
        d_type = 2; % M F separate
        d_name = opt_list{list_idx};
    case 'sleep'
        y_label = [opt_list{list_idx} ' (%)'];
        d_type = 2; % M F separate
        d_name = opt_list{list_idx};
end

% set up figure aligments
r = 5; %rows
c = 3; %columns
sb(1).idx = [1,2]; %temp timecourse
sb(2).idx = [4,5,7,8,10,11,13,14]; % variable to examine timecourse
sb(3).idx = 3:c:r*c; % temp binned variable alignment

fig = getfig('',1);
% temperature time course
subplot(r,c,sb(1).idx); hold on
x = data.time;
y = data.temp;
plot(x,y,'color', foreColor, 'linewidth',LW)
% TODO: update this code to load and parse the data correctly for diff
% sized data structures (e.g., 2 flies vs. single column)  
raw_data = data.(d_name);

% time course of variable
subplot(r,c,sb(2).idx); hold on
x = data.time;
switch d_type
    case 1 % single value for M & F
            y_all = raw_data;
            y_avg = smooth(sum(y_all,2,'omitnan'),sSpan,'moving').*multiplier;
            plot(x,y_avg,'color',foreColor,'linewidth',LW+1)
    case 2 % separate values for M & F 
        for sex = 1:2
            y_all = squeeze(raw_data(:,sex,:));
            y_avg = smooth(sum(y_all,2,'omitnan'),sSpan,'moving').*multiplier;
            plot(x,y_avg,'color',data.color(sex,:),'linewidth',LW+1)
        end
end

%temp dependent variable
subplot(r,c,sb(3).idx); hold on
x = data.tempbin.temps;
    for sex = 1:2
        % setup the data for extraction
        if d_type==1
            y_all = raw_data;
            kolor = foreColor;
        else
            y_all = squeeze(raw_data(:,sex,:));
            kolor = data.color(sex,:);
        end
        if d_type==1 && sex==2
            continue
        end
        %extract data
        [c_avg,w_avg,c_err,w_err] = deal([]);
        for t = 1:length(x)
            % cooling
            loc = data.tempbin.cooling(:,t);
            y_sel = sum(y_all(loc,:),1,'omitnan').*multiplier;
            c_avg(t) = sum(y_sel,'omitnan');
            % c_err(t) = std(y_sel, 0,2,'omitnan');
            % warming
            loc = data.tempbin.warming(:,t);
            y_sel = sum(y_all(loc,:),1,'omitnan').*multiplier;
            w_avg(t) = sum(y_sel,'omitnan');
            % w_err(t) = std(y_sel, 0,2,'omitnan');
            % % cooling
            % loc = data.tempbin.cooling(:,t);
            % y_sel = mean(squeeze(raw_data(loc,sex,:)),1,'omitnan');
            % c_avg(t) = mean(y_sel,'omitnan');
            % c_err(t) = std(y_sel, 0,2,'omitnan');
            % % warming
            % loc = data.tempbin.warming(:,t);
            % y_sel = mean(squeeze(raw_data(loc,sex,:)),1,'omitnan');
            % w_avg(t) = mean(y_sel,'omitnan');
            % w_err(t) = std(y_sel, 0,2,'omitnan');
        end
        % plot data
        % plot_error_fills(plot_err, x, c_avg, c_err, kolor,fig_type);
        % plot_error_fills(plot_err, x, w_avg, c_err, kolor,fig_type);
        plot(x,c_avg,'color',kolor,'linewidth',LW+1,'LineStyle','--')
        plot(x,w_avg,'color',kolor,'linewidth',LW+1,'LineStyle','-')
    end

% format figure: 
formatFig(fig, blkbgd, [r,c],sb);
subplot(r,c,sb(1).idx);
    set(gca, 'xcolor', 'none')
    ylabel('\circC')
subplot(r,c,sb(2).idx);    
    ylabel(y_label)
    xlabel('time (min)')
    set(gca, 'YDir',axis_dir)
subplot(r,c,sb(3).idx);
    ylabel(y_label)
    xlabel('temp (\circC)')
    set(gca, 'YDir',axis_dir)

save_figure(fig, [figFolder opt_list{list_idx}],fig_type);


%% Courtship frequency figure: 
clearvars('-except',initial_var{:})
% when and where is the concentration of courtship over experimental time?
[foreColor, ~] = formattingColors(blkbgd); %get background colors
sex = 1;
% compile the data: 
[pD(1).x, pD(2).x, pD(1).y,pD(2).y] = deal([]);
for i = 1:num.trials
    % for sex = 1:2
        x = fly(i).time;
        y = fly(i).T.CI;
        pD(sex).x = [pD(sex).x, x];
        pD(sex).y = [pD(sex).y, y];
    % end
end

% set up figure aligments
r = 5; %rows
c = 3; %columns
sb(1).idx = [1,2]; %temp timecourse
sb(2).idx = [4,5,7,8,10,11,13,14];
sb(3).idx = 3:c:r*c; %binned distance alignment
LW = 1;

fig = getfig('',1); 

subplot(r,c,sb(1).idx);
hold on
for i = 1:num.trials
    x = fly(i).time;
    y = fly(i).T.temperature;
    plot(x,y,'color', foreColor,'LineWidth', LW)
end
ylabel('temp (\circC)')

subplot(r,c,sb(2).idx);
hold on
for sex = 1:2
    x = mean(pD(sex).x,2);
    y = sum(pD(sex).y,2);
    plot(x,smooth(y,5*60,'moving'),'color', foreColor,'LineWidth',lw)
end
xlabel('time (min)')
ylabel('courtship index sum')

formatFig(fig,blkbgd,[r,c],sb);
subplot(r,c,sb(1).idx);
set(gca, 'xcolor', 'none')



%% Flies on food: 
clearvars('-except',initial_var{:})
% when and where is the concentration of courtship over experimental time?
[foreColor, ~] = formattingColors(blkbgd); %get background colors

% compile the data: 
[pD(1).x, pD(2).x, pD(1).y,pD(2).y] = deal([]);
for i = 1:num.trials
    % for sex = 1:2
        x = fly(i).time;
        y = fly(i).T.CI;
        pD(sex).x = [pD(sex).x, x];
        pD(sex).y = [pD(sex).y, y];
    % end
end

% set up figure aligments
r = 5; %rows
c = 3; %columns
sb(1).idx = [1,2]; %temp timecourse
sb(2).idx = [4,5,7,8,10,11,13,14];
sb(3).idx = 3:c:r*c; %binned distance alignment
LW = 1;

fig = getfig('',1); 

subplot(r,c,sb(1).idx);
hold on
for i = 1:num.trials
    x = fly(i).time;
    y = fly(i).T.temperature;
    plot(x,y,'color', foreColor,'LineWidth', LW)
end
ylabel('temp (\circC)')

subplot(r,c,sb(2).idx);
hold on
for sex = 1:2
    x = mean(pD(sex).x,2);
    y = sum(pD(sex).y,2);
    plot(x,smooth(y,5*60,'moving'),'color', foreColor,'LineWidth',lw)
end
xlabel('time (min)')
ylabel('courtship index sum')

formatFig(fig,blkbgd,[r,c],sb);
subplot(r,c,sb(1).idx);
set(gca, 'xcolor', 'none')

%% TODO: group behavior state transition map

%% TODO:  grouped Courtship behavior frequency time course
clearvars('-except',initial_var{:})
[foreColor, ~] = formattingColors(blkbgd); %get background colors
kolor = Color('gold');
% simple plot of when the different courtship behaviors are happening
r = 5;
c = 1;
lw = 2;

fig = getfig('',1);
% time
subplot(r,c,1); hold on 
x = data.time;
y = data.temp;
plot(x,y,'color', foreColor, 'linewidth', lw)
ylabel('\circC')

% full courtship index
subplot(r,c,2); hold on 
    x = data.time;
    y = sum(data.CI,2);
    plot(x,y,'color', foreColor, 'linewidth', lw)
    ylabel('CI')

% wing extension
subplot(r,c,3); hold on 
    x = data.time;
    y = sum(data.wing_ext_all,2);
    plot(x,y,'color', foreColor, 'linewidth', lw)
    y = sum(data.wing_ext,2);
    plot(x,y,'color', kolor, 'linewidth', lw)
    ylabel('wing ext')

% chasing
subplot(r,c,4); hold on 
    x = data.time;
    y = sum(data.chase_all,2);
    plot(x,y,'color', foreColor, 'linewidth', lw)
    y = sum(data.court_chase,2);
    plot(x,y,'color', kolor, 'linewidth', lw)
    ylabel('chase')

% circling
subplot(r,c,5); hold on 
    x = data.time;
    y = sum(data.circling_all,2);
    plot(x,y,'color', foreColor, 'linewidth', lw)
    y = sum(data.circling_1sec,2);
    plot(x,y,'color', kolor, 'linewidth', lw)
    ylabel('circling')
    xlabel('time (min)')

% formating: 
formatFig(fig, blkbgd,[r,c]);
trans = [data.cooling_idx, data.warming_idx(2)];
for i = 1:r
    subplot(r,c,i)
    v_line(data.time(trans),'r', '--',1)
    if i<r
        set(gca, 'xcolor', 'none')
    end
end




%% TODO: behavior probabilities for states that happen before sleep & how long it took between them...
clearvars('-except',initial_var{:})
[foreColor, ~] = formattingColors(blkbgd); %get background colors

% what is the behavior that happened just prior to sleep and how long ago
% did it happen?
[behavior_next, behavior_last] = deal([]);
index = 1;
for i = 1:num.trials
    for sex = 1:2
        loc = find(diff(data.sleep(:,sex,i))==1)+1;  % frame number of when sleep starts
        sleep_off = find(diff(data.sleep(:,sex,i))==-1);
        % behavior comparisions
        if ~isempty(loc)
            for sleep = 1:length(loc)
                % last behavior that happened before sleep
                outRing_last = find(data.OutterRing(1:loc(sleep),sex,i), 1, 'last' ); % outer ring 
                outRing_last = empty2nan(outRing_last);
                onFood_last = find(data.FlyOnFood(1:loc(sleep),sex,i), 1, 'last' ); % on food
                onFood_last = empty2nan(onFood_last);
                if sex==1
                    courtship_last = find(data.FlyOnFood(1:loc(sleep),sex,i), 1, 'last' ); % on food
                    courtship_last = empty2nan(courtship_last);
                else
                    courtship_last = nan;
                end
                [frame_last, idx_last] = max([outRing_last, onFood_last, courtship_last]);
                %save into large matrix
                behavior_last(index,:) = [i, loc(sleep), idx_last, frame_last, outRing_last, onFood_last, courtship_last];

                % next behavior that happened after sleep
                outRing_next = find(data.OutterRing(sleep_off(sleep)+1:end,sex,i), 1, 'first' )+sleep_off(sleep)+1; % outer ring 
                outRing_next = empty2nan(outRing_next);
                onFood_next = find(data.FlyOnFood(sleep_off(sleep)+1:end,sex,i), 1, 'first' )+sleep_off(sleep)+1; % on food
                onFood_next = empty2nan(onFood_next);
                if sex==1
                    courtship_next = find(data.FlyOnFood(sleep_off(sleep)+1:end,sex,i), 1, 'first' )+sleep_off(sleep)+1; % on food
                    courtship_next = empty2nan(courtship_next);
                else
                    courtship_next = nan;
                end
                [frame_next, idx_next] = min([outRing_next, onFood_next, courtship_next]);
                %save into large matrix
                behavior_next(index,:) = [i, sleep_off(sleep), idx_next, frame_next, outRing_next, onFood_next, courtship_next];
                
                % increase the matrix count: 
                index = index+1;
            end
        end
    end
    disp(i)
end

% figure -- what were the last and next behaviors?
time_to_sleep = ((behavior_last(:,2)-behavior_last(:,5:7))./fly(1).fps)./60; % in minutes
time_since_sleep = ((behavior_next(:,5:7) - behavior_next(:,2))./fly(1).fps)./60; % in minutes

beh_list = {'outer ring', 'food', 'courtship'};

fig = getfig('',1);
subplot(1,2,1); hold on
    x = repmat([1,2,3],[size(time_to_sleep,1),1]);
    plot(x', time_to_sleep')
    scatter(x, time_to_sleep,35,foreColor,'filled')
    xlim([0,4])
    set(gca, 'xtick', 1:3,'xticklabel', beh_list)
    ylabel('time from last behavior to sleep (min)')
    title('Previous Behavior')
subplot(1,2,2); hold on
    x = repmat([1,2,3],[size(time_since_sleep,1),1]);
    plot(x', time_since_sleep')
    scatter(x, time_since_sleep,35,foreColor,'filled')
    xlim([0,4])
    set(gca, 'xtick', 1:3,'xticklabel', beh_list)
    ylabel('time to next behavior after sleep (min)')
    title('Subsequent Behavior')
formatFig(fig, blkbgd,[1,2]);

save_figure(fig, [figDir 'behaviors before and after sleep'],fig_type);

%% 











































































