
%% Initial ANALYSIS: General data organization (forward and backwards compatability
if ~exist('pix2mm','var')
    pix2mm = 12.8;
end
% fill out the data structure
for trial = 1:ntrials
    if isempty(data(trial).occupancy)
        data(trial).occupancy = data(trial).data.occupancy;
    end
    if isempty(data(trial).nflies)
        data(trial).nflies = data(trial).data.nflies;
    end
    if isempty(data(trial).wellLabels)
        data(trial).wellLabels = data(trial).data.wellLabels;
    end
    if isempty(data(trial).dist2wells)
        try
            data(trial).dist2wells = data(trial).data.occupancy.dist2wells;
        catch
            for well = 1:4
                data(trial).dist2wells(:,well) = data(trial).occupancy.dist2wells(well).N(:,1)./pix2mm;
            end
        end
    elseif isfield(data(trial).dist2wells, 'N')
        temp = data(trial).dist2wells;
        data(trial).dist2wells = [];
        for well = 1:4
            data(trial).dist2wells(:,well) = temp(well).N(:,1)./pix2mm;
        end
    end
end
clearvars('-except',initial_vars{:})

%% Experiment temp overlaid with start and stop points for each analysis section

tempPoints = getTempTurnPoints(T.TempProtocol{1});

fig = figure; set(fig, 'position', [107 595 1150 235]); hold on
    for trial = 1:ntrials
        X = data(trial).occupancy.time;
        Y = data(trial).occupancy.temp;
        plot(X, Y, 'linewidth', 1,'Color','w') 
    end
    xlabel('Time (min)')
    ylabel('Temp (\circ)')
    title({'temperature alignment across experiments';...
          ['N = ' num2str(ntrials)]})
    
    % Add points for hold regions
    %start
    start_points = X(tempPoints.hold(:,1));
    stop_points = X(tempPoints.hold(:,2));
    v_line(start_points,'green','-',1.5);
    v_line(stop_points,'red','-',1.5);
formatFig(fig, true);

save_figure(fig, [figDir 'temperature alignment'], '-png');
clearvars('-except',initial_vars{:})


%% Speed across the full experiment
sSpan = 30;

fig = figure; set(fig, 'position', [1977 564 853 466])
subplot(2,1,1); hold on
    for trial = 1:ntrials
        X = data(trial).occupancy.time;
        Y = data(trial).occupancy.temp;
        plot(X, Y, 'linewidth', 1,'Color','w') 
    end
    xlabel('Time (min)')
    ylabel('Temp (\circ)')
    title({'temperature alignment across experiments';...
          ['N = ' num2str(ntrials)]})
subplot(2,1,2); hold on   
    for trial = 1:ntrials
        X = data(trial).occupancy.time;
        Y = smooth(data(trial).speed.avg,sSpan,'moving');
        plot(X, Y, 'linewidth', 1) 
    end
    
formatFig(fig, true,[2,1]);

save_figure(fig, [figDir 'temperature and speed timecourse'], '-png');
clearvars('-except',initial_vars{:})



%% Plot out the timepoints for each temp drop (compare across the three drops)

tempPoints = getTempTurnPoints(T.TempProtocol{1});

ROI_start = 80; % minutes into recovery period
ROI_duration = 10; % length of ROI to look at

controlIdx = 1;
lowTempIdx = 2:2:6;
holdTempIdx = 3:2:7;

% ---------- Cold step down ----------
fig = figure; set(fig,'pos', [2058 352 491 660])
hold on
offset = 0.3;
SZ = 3;
for ii = 1:length(lowTempIdx)
    cold(ii).data = [];
    for trial = 1:ntrials
        ROI = tempPoints.hold(lowTempIdx(ii),1):tempPoints.hold(lowTempIdx(ii),2);
%         ROI = ROI(end-500:end);
        ROI = ROI(end-14400:end-1350);
        Y = data(trial).speed.avg(ROI);
        X = shuffle_data(linspace(ii-offset,ii+offset,length(Y)));
        scatter(X,Y,SZ,'filled')
        cold(ii).data = [cold(ii).data; Y];
    end
    plot([ii-offset,ii+offset],[mean(cold(ii).data,'omitnan'),mean(cold(ii).data,'omitnan')],'color','w','LineWidth',2)
end

% Formatting
xlim([offset,length(lowTempIdx)+1-offset])
formatFig(fig,true);
xlabel('Cold step down (#)')
ylabel('Speed (mm/s)')

save_figure(fig, [figDir 'speed during cold drop scatterplot'], '-png');

% ------------Warm recovery -------------

fig = figure; set(fig,'pos', [2058 352 491 660])
hold on
offset = 0.3;
SZ = 3;
for ii = 1:length(holdTempIdx)
    hot(ii).data = [];
    for trial = 1:ntrials
        ROI = tempPoints.hold(holdTempIdx(ii),1):tempPoints.hold(holdTempIdx(ii),2);
        ROI = ROI(end-500:end);
        Y = data(trial).speed.avg(ROI);
        X = shuffle_data(linspace(ii-offset,ii+offset,length(Y)));
        scatter(X,Y,SZ,'filled')
        hot(ii).data = [hot(ii).data; Y];
    end
    plot([ii-offset,ii+offset],[mean(hot(ii).data,'omitnan'),mean(hot(ii).data,'omitnan')],'color','w','LineWidth',2)
end

% Formatting
xlim([offset,length(holdTempIdx)+1-offset])
formatFig(fig,true);
xlabel('Warm recovery (#)')
ylabel('Speed (mm/s)')

save_figure(fig, [figDir 'speed during warm recovery scatterplot'], '-png');

clearvars('-except',initial_vars{:})

%% Overlay step avg by trial and by step number
% Overlay the two -- organized by trial???

tempPoints = getTempTurnPoints(T.TempProtocol{1});

controlIdx = 1;
lowTempIdx = 2:2:6;
holdTempIdx = 3:2:7;
stepROI = 5;
% ---------- Cold step down ----------
fig = figure; set(fig,'pos', [2058 352 491 660])
    hold on
    offset = 0.3; 
    SZ = 50;
    X = 1:size(tempPoints.hold,1);
    plotData = [];
    for trial = 1:ntrials
        for ii = X
            ROI = tempPoints.hold(ii,2)-(round(stepROI*60*3)):tempPoints.hold(ii,2);
    %         ROI = tempPoints.hold(lowTempIdx(ii),1):tempPoints.hold(lowTempIdx(ii),2);
            plotData(trial,ii) = mean(data(trial).speed.avg(ROI),'omitnan');
        end
        plot(X,plotData(trial,:),'linewidth',1,'color',Color('grey'))
        scatter(X(1:2:end),plotData(trial,1:2:end),SZ,'red','filled')
        scatter(X(2:2:end),plotData(trial,2:2:end),SZ,Color('royalblue'),'filled')
    end
    % Plot the group average
    for ii = X
        plot([ii-offset,ii+offset],[mean(plotData(:,ii)),mean(plotData(:,ii))],'color', Color('gold'),'LineWidth',2)
    end
% Formatting
xlim([0,8])
formatFig(fig,true);
xlabel('Cold step down (#)')
ylabel('Speed (mm/s)')

save_figure(fig, [figDir 'avg speed for each step last ' num2str(stepROI) ' minutes'], '-png');























