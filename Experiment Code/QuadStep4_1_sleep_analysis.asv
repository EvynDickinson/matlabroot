
% Find 'sleep' points in data
%% (DONT RUN) visualize grid spacing & single trial visualization
% nbins = 50;
% i = 1;
% trial = 1;
% vid = 1;
% frame = 1;
% 
% % pull info for the first trial:
% dataDate = data(i).T.Date{trial};
% vid_name = data(i).T.ExperimentID{trial};
% vidDir = [baseFolder dataDate '/' vid_name '_'];
% videoPath = [vidDir num2str(vid) '.avi'];
% movieInfo = VideoReader(videoPath); %read in video

% % Set axis limits for the selected arena
% x = data(i).data(trial).data.centre(1);
% y = data(i).data(trial).data.centre(2);
% r = data(i).data(trial).data.r;
% xlimit = [x-(r+50),x+(r+50)];
% ylimit = [y-(r+50),y+50+r];
% 
% % Plot image of video frame
% fig = figure; set(fig,'pos',[-1030 279 772 1009],'color','k');
% currentImg = rgb2gray(read(movieInfo,frame));
% imshow(currentImg)
% xlim(xlimit); ylim(ylimit);   
% 
% % find the 'auto bin' lines
% xedge = linspace(xlimit(1),xlimit(2),nbins+1);
% yedge = linspace(ylimit(1),ylimit(2),nbins+1);
% 
% % Plot the bin outline edges:
% h_line(yedge,'yellow','-',0.25) 
% v_line(xedge,'yellow','-',0.25)

% %% Single trial quant and figure

% i = 1;
% 
% sleepData = struct;
% for trial = 1:num.trial(i)
% 
%     % Set axis limits for the selected arena
%     x = data(i).data(trial).data.centre(1);
%     y = data(i).data(trial).data.centre(2);
%     r = data(i).data(trial).data.r;
%     xlimit = [x-(r+50),x+(r+50)];
%     ylimit = [y-(r+50),y+50+r];
% 
%     % find the 'auto bin' lines
%     xedge = linspace(xlimit(1),xlimit(2),nbins+1);
%     yedge = linspace(ylimit(1),ylimit(2),nbins+1);
%     
%     % pull the fly locations during the trial
%     x_loc = data(i).data(trial).data.x_loc;
%     y_loc = data(i).data(trial).data.y_loc;
%     trial_length = size(y_loc,1);
%     
%     N = [];
%     for frame = 1:trial_length
%         X = x_loc(frame,:); X(isnan(X)) = [];
%         Y = y_loc(frame,:); Y(isnan(Y)) = [];
%         N(:,:,frame) = histcounts2(X,Y,xedge,yedge);
%     end
%     
%     % find grid space that have continuous occupation for more than min_duration 
%     frameCount = N(:,:,1);
%     for frame = 2:trial_length
%         currFrame = N(:,:,frame); % current frame locations
%         resetLoc = currFrame==0; % locations that do not have flies and thus need a count reset
%         
%         tempCount = frameCount(:,:,frame-1)+currFrame; % add current frames to list
%         tempCount(resetLoc) = 0; % reset counts for spots with no flies
%         
%         frameCount(:,:,frame) = tempCount; % add current count into the saving structure
%     end
%     
%     % Find instances of 'sleep'?
%     [sleepingCount,sleepLoc] = deal([]);
%     for frame = 1:trial_length
%         sleepLoc(:,:,frame) = frameCount(:,:,frame) > min_duration;
%         sleepingCount(frame) = sum(sum(sleepLoc(:,:,frame)));
%     end
% 
%     % Save into group structures
%     sleepData(trial).frameCount = frameCount;
%     sleepData(trial).sleepLoc = sleepLoc;
%     sleepData(trial).sleepingCount = sleepingCount;
% %     fprintf(['\nDone exp ' num2str(i) ' trial ' num2str(trial)])
% end

% sb(1).idx = 1;
% sb(2).idx = 2:3;
% r = 3;
% c = 1;
% 
% fig = figure;
% subplot(r,c,sb(1).idx)
%     time = data(i).data(trial).occupancy.time;
%     temp = data(i).data(trial).occupancy.temp;
%     plot(time, temp, 'color','w', 'linewidth', 1)
%     xlabel('time (min)')
%     ylabel('temp (\circC)')
% subplot(r,c,sb(2).idx)
%     plot(time, sleepingCount, 'color','w', 'linewidth', 1)
%     ylabel('# flies sleeping')
%      xlabel('time (min)')
% 
% formatFig(fig,true,[r,c],sb);

%% ANALYSIS: run and save the sleep quanitification
clearvars('-except',initial_vars{:})
% How long does a fly need to be still to count as 'sleep'
min_duration = 5*3*60; % 5 mins * 3fps*60sec = data point number that must be met 'unmoving'
nbins = 50;

% Create sleep data for unprocessed files (trial by trial)
for i = 1:num.exp
    T = data(i).T;
    for trial = 1:num.trial(i)
        sleep_file = [baseFolder T.Date{trial} '\Arena ' T.Arena{trial} '\' T.ExperimentID{trial} ' sleeping data.mat'];  
        if ~exist(sleep_file,"file")
            sleepData = struct;
            %preallocate for speed and space
            trial_length = length(data(i).data(trial).occupancy.time);
            [N,frameCount,sleepLoc] = deal(nan(nbins,nbins,trial_length));
            sleepingCount = zeros(trial_length,1);

            % Set axis limits for the selected arena
            x = data(i).data(trial).data.centre(1);
            y = data(i).data(trial).data.centre(2);
            r = data(i).data(trial).data.r;
            xlimit = [x-(r+50),x+(r+50)];
            ylimit = [y-(r+50),y+50+r];

            % find the 'auto bin' lines
            xedge = linspace(xlimit(1),xlimit(2),nbins+1);
            yedge = linspace(ylimit(1),ylimit(2),nbins+1);

            % pull the fly locations during the trial
            x_loc = data(i).data(trial).data.x_loc;
            y_loc = data(i).data(trial).data.y_loc;
            for frame = 1:trial_length
                X = x_loc(frame,:); X(isnan(X)) = [];
                Y = y_loc(frame,:); Y(isnan(Y)) = [];
                N(:,:,frame) = histcounts2(X,Y,xedge,yedge);
            end

            % find grid space that have continuous occupation for more than min_duration
            frameCount(:,:,1) = N(:,:,1);
            for frame = 2:trial_length
                currFrame = N(:,:,frame); % current frame locations
                resetLoc = currFrame==0; % locations that do not have flies and thus need a count reset

                tempCount = frameCount(:,:,frame-1)+currFrame; % add current frames to list
                tempCount(resetLoc) = 0; % reset counts for spots with no flies

                frameCount(:,:,frame) = tempCount; % add current count into the saving structure
            end

            % ---- Vectorize the data (find the flies that are sleeping....) -----

            % find food well location for distance capture later
            foodWellLoc = data(i).data(trial).data.wellcenters(:,data(i).T.foodLoc(trial));
            c1 = foodWellLoc(1);
            c2 = foodWellLoc(2);
            
            % create empty matrixes for the x and y positions of the sleeping flies
            sleeping = struct;
            [sleeping.X, sleeping.Y, sleeping.all_distance] = deal(nan(trial_length,data(i).T.NumFlies(trial)));
            sleeping.sleepNum = zeros(trial_length,1);
            [sleeping.dist_avg, sleeping.dist_err] = deal(nan(trial_length,1));
            % assign data by frame
            for frame = 1:trial_length
                frame_data = frameCount(:,:,frame) > min_duration;
                binLoc = find(frame_data>0);
                
                % Find the coordinates of the sleeping flies bins from the discretized data
                y_row = ceil(binLoc/nbins);
                x_row = rem(binLoc-1,nbins)+1;
                x_position = (xedge(x_row) + xedge(x_row+1))/2;
                y_position = (yedge(y_row) + yedge(y_row+1))/2;
                
                % add position data to the matrix:
                if ~isempty(binLoc)
                    % number of flies sleeping
                    sleepNum = length(x_position);
                    sleeping.sleepNum(frame) = sleepNum;
                    % location of sleeping flies
                    sleeping.X(frame,1:sleepNum) = x_position;
                    sleeping.Y(frame,1:sleepNum) = y_position;
                    % distance to food...
                    temp_dist = sqrt((x_position-c1).^2 + (y_position-c2).^2)./pix2mm;
                    sleeping.all_distance(frame,1:sleepNum) = temp_dist;
                    % average distance:
                    sleeping.dist_avg(frame) = mean(temp_dist);
                    sleeping.dist_err(frame) = std(temp_dist);
                end
            end

            save(sleep_file,'sleeping','-v7.3'); 
        end   
        disp([num2str(i) ' | ' num2str(trial)])
        clear N preallocate frameCount sleepingCount sleepLoc resetLoc tempCount
    end
    disp(['Done exp ' expNames{i}])
end
clearvars('-except',initial_vars{:})

%% Load previously created sleep data files:

sleep = struct;
for i = 1:num.exp
    T = data(i).T;
    for trial = 1:num.trial(i)
        sleep_file = [baseFolder T.Date{trial} '\Arena ' T.Arena{trial} '\' T.ExperimentID{trial} ' sleeping data.mat'];  
        if exist(sleep_file,"file")
            load(sleep_file,'sleeping');
            sleep(i).trial(trial) = sleeping;
            clear sleeping
        else
            h = warndlg(['Warning: missing sleep data for ' expNames{i}]);
            uiwait(h)
        end
    end
end
disp('Loaded all sleep data')

% Process and prep the data for further analysis
for i = 1:num.exp
    [sleep(i).num, sleep(i).fract_sleep] = deal(zeros(length(grouped(i).temp),num.trial(i)));
    sleep(i).distance = nan(length(grouped(i).temp),num.trial(i));
    for trial = 1:num.trial(i)
        %number of sleeping flies
        inputdata = sleep(i).trial(trial).sleepNum;
        sleep(i).num(1:length(inputdata),trial) = inputdata;
        sleep(i).fract_sleep(1:length(inputdata),trial) = inputdata/data(i).T.NumFlies(trial);
        %distance to food for sleeping flies
        inputdata = sleep(i).trial(trial).dist_avg;
        sleep(i).distance(1:length(inputdata),trial) = inputdata;
    end
    sleep(i).sleepfract_avg = mean(sleep(i).fract_sleep,2,'omitnan');
    sleep(i).sleepfract_err = std(sleep(i).fract_sleep,0,2,'omitnan');
end

initial_vars{end+1} = 'sleep';
clearvars('-except',initial_vars{:})


%% FIGURE: sleeping over time
plot_err = true;
[~,backColor] = formattingColors(blkbgd); %get background colors
LW = 1.5;
sb(1).idx = 1;
sb(2).idx = 2:3;
r = 3;
c = 1;
sSpan = 180; %1 minute smoothing


fig = getfig('',1);
for i = 1:num.exp
    subplot(r,c,sb(1).idx); hold on
        time = grouped(i).time;
        temp = grouped(i).temp;
        kolor = grouped(i).color;
        plot(time, temp, 'color',kolor, 'linewidth', LW)
        ylabel('temp (\circC)')
    subplot(r,c,sb(2).idx); hold on
        y = smooth(sleep(i).sleepfract_avg,sSpan,'moving');
        y_err = smooth(sleep(i).sleepfract_err,sSpan,'moving');
        if plot_err
            fill_data = error_fill(time, y, y_err);
            h = fill(fill_data.X, fill_data.Y, kolor, 'EdgeColor','none');
            set(h, 'facealpha', 0.4)
        end
        plot(time,y,'color',kolor,'linewidth',LW)
        ylabel('fraction of flies sleeping')
        xlabel('time (min)')
end

formatFig(fig,true,[r,c],sb);
subplot(r,c,sb(1).idx);
set(gca,'xcolor',backColor) 

save_figure(fig,[saveDir expGroup ' sleep timecourse'],fig_type);


%% ANALYSIS & FIGURE: sleeping tuning curve...
clearvars('-except',initial_vars{:})
plot_err = true;
[foreColor,backColor] = formattingColors(blkbgd); %get background colors

% Cluster the sleeping flies by temperature
plotData = struct;
for i = 1:num.exp  
    temps = unique(data(i).G(1).TR.temps);
    rateIdx = data(i).G(1).TR.rateIdx;
    tempIdx = data(i).G(1).TR.tempIdx;
    % find rate index
    heatRate = find(data(i).G(1).TR.rates>0);
    coolRate = find(data(i).G(1).TR.rates<0);
    try 
        holdRate = find(data(i).G(1).TR.rates==0);
        ntypes = 3;
    catch
        ntypes = 2;
    end
    
    for temp = 1:length(temps)
        for type = 1:ntypes
            switch type
                case 1 %heating
                    g_name = 'increasing';
                    idxSex = heatRate;
                case 2 %cooling
                    g_name = 'decreasing';
                    idxSex = coolRate;
                case 3 %holding
                    g_name = 'holding';
                    idxSex = holdRate;
            end
            % increasing rates:
            loc = rateIdx==idxSex & tempIdx==temp; %rate and temp align
            plotData(i).(g_name)(temp,1) = mean(mean(sleep(i).fract_sleep(loc,:),2,'omitnan'),'omitnan'); %avg 
            plotData(i).(g_name)(temp,2) = std(mean(sleep(i).fract_sleep(loc,:),1,'omitnan'),'omitnan');%./num.trial(i); %err
        end
        % Clustered by temp (regardless of heating/cooling)
        loc = tempIdx==temp; %temp align only
        plotData(i).temp_all(temp,1) = mean(mean(sleep(i).fract_sleep(loc,:),2,'omitnan'),'omitnan'); %avg 
        plotData(i).temp_all(temp,2) = std(mean(sleep(i).fract_sleep(loc,:),1,'omitnan'),'omitnan')./num.trial(i);% %err
    end
    plotData(i).temps = temps;
end
disp('All finished')


% set up figure aligments
r = 5; %rows
c = 3; %columns
sb(1).idx = [1,2]; %temp timecourse
sb(2).idx = [4,5,7,8,10,11,13,14]; %sleeping flies timecourse
sb(3).idx = 3:c:r*c; %binned distance alignment

LW = 0.75;
sSpan = 180;
dataString = cell([1,num.exp]);

% FIGURE:
fig = getfig('',true); 
for i = 1:num.exp
    x = grouped(i).time;
    kolor = grouped(i).color;

    %temp
    subplot(r,c,sb(1).idx); hold on
        y = grouped(i).temp;
        plot(x,y,'LineWidth',2,'Color',kolor)
    
    %number of flies sleeping over time
    subplot(r,c,sb(2).idx); hold on
        y = smooth(sleep(i).sleepfract_avg,sSpan,'moving');
        y_err = smooth(sleep(i).sleepfract_err,sSpan,'moving');
        if plot_err
            fill_data = error_fill(x, y, y_err);
            h = fill(fill_data.X, fill_data.Y, kolor, 'EdgeColor','none');
            set(h, 'facealpha', 0.4)
        end
        plot(x,y,'color',kolor,'linewidth',LW)
        ylabel('fraction flies sleeping')
        xlabel('time (min)')
%         if ~autoLim
%             ylim(num_lim)
%         end

    %temp dependent distance
    subplot(r,c,sb(3).idx); hold on
        x = plotData(i).temps;
        y = plotData(i).temp_all(:,1);
        y_err = plotData(i).temp_all(:,2);
        loc = isnan(y)|isnan(y_err);
        x(loc) = [];
        y(loc) = [];
        y_err(loc) = [];
 
        plot(x,y,'color',kolor,'linewidth',LW+1)
        if plot_err
            fill_data = error_fill(x, y, y_err);
            h = fill(fill_data.X, fill_data.Y, kolor, 'EdgeColor','none','HandleVisibility','off');
            set(h, 'facealpha', 0.35)
        end
        dataString{i} = grouped(i).name;
end

% FORMATING AND LABELS
formatFig(fig,blkbgd,[r,c],sb);
% temp
subplot(r,c,sb(1).idx) 
ylabel('\circC')
set(gca,"XColor",backColor)
% distance
subplot(r,c,sb(2).idx) 
ylabel('fraction of flies sleeping')
xlabel('time (min)')
set(gca,"XColor",foreColor)
% temp-distance relationship 
subplot(r,c,sb(3).idx) 
ylabel('fraction of flies sleeping')
xlabel('temp (\circC)')
% if ~autoLim
%     ylim(num_temp_lim)
% end
% 
% legend(dataString,'textcolor', foreColor, 'location', 'southeast', 'box', 'off','fontsize', 5)

save_figure(fig,[saveDir expGroup ' sleeping flies summary'],fig_type);


% FIGURE: Flies sleeping divided by heating / cooling
equalLim = true;
LW = 1.5;
r = 1;
c = 2;
nMax = num.exp;

% FIGURE:
fig = getfig('',true); 
% AVG
subplot(r,c,1)
hold on
for i = 1:nMax
    kolor = grouped(i).color;
    x = plotData(i).temps;
    y = plotData(i).temp_all(:,1);
    y_err = plotData(i).temp_all(:,2);
    loc = isnan(y)|isnan(y_err);
    x(loc) = [];
    y(loc) = [];
    y_err(loc) = [];

    plot(x,y,'color',kolor,'linewidth',LW+1)
    if plot_err
        fill_data = error_fill(x, y, y_err);
        h = fill(fill_data.X, fill_data.Y, kolor, 'EdgeColor','none','HandleVisibility','off');
        set(h, 'facealpha', 0.35)
    end
end
xlabel('Temperature (\circC)')
ylabel('fraction of flies sleeping')
% SEP HEAT / COOL
subplot(r,c,2)
hold on
for i = 1:nMax
    kolor = grouped(i).color;   
    for type = 1:2 %increasing | decreasing 
        switch type
            case 1
                section_type = 'increasing';
                l_style = '-';
            case 2
                section_type = 'decreasing';
                l_style = '--';
        end
        x = plotData(i).temps;
        y = plotData(i).(section_type)(:,1);
        y_err = plotData(i).(section_type)(:,2);
        loc = isnan(y)|isnan(y_err);
        x(loc) = [];
        y(loc) = [];
        y_err(loc) = [];
%         if plot_err
%             fill_data = error_fill(x, y, y_err);
%             h = fill(fill_data.X, fill_data.Y, kolor, 'EdgeColor','none','HandleVisibility','off');
%             set(h, 'facealpha', 0.2)
%         end
        plot(x,y,'color',kolor,'linewidth',LW+1,'linestyle',l_style)
    end
end
xlabel('Temperature (\circC)')
ylabel('fraction of flies sleeping')
    
% FORMATING AND LABELS
formatFig(fig,blkbgd,[r,c]);
if equalLim
    fig = matchAxis(fig,true);
end
% ylim(num_temp_lim)

% save figure
save_figure(fig,[saveDir 'Flies sleeping during heating and cooling'],fig_type);



%% FIGURE: distance and sleep over time
% Set params:

clearvars('-except',initial_vars{:})

LW = 1;
r = 1; %rows
c = 2; %columns
plot_err = true;
[foreColor,~] = formattingColors(blkbgd);
equalLim = true;

% Organize data

% Cluster the sleeping flies by temperature?
plotData = struct;
for i = 1:num.exp  
    temps = unique(data(i).G(1).TR.temps);
    rateIdx = data(i).G(1).TR.rateIdx;
    tempIdx = data(i).G(1).TR.tempIdx;
    % find rate index
    heatRate = find(data(i).G(1).TR.rates>0);
    coolRate = find(data(i).G(1).TR.rates<0);
    try 
        holdRate = find(data(i).G(1).TR.rates==0);
        ntypes = 3;
    catch
        ntypes = 2;
    end
    
    for temp = 1:length(temps)
        for type = 1:ntypes
            switch type
                case 1 %heating
                    g_name = 'increasing';
                    idxSex = heatRate;
                case 2 %cooling
                    g_name = 'decreasing';
                    idxSex = coolRate;
                case 3 %holding
                    g_name = 'holding';
                    idxSex = holdRate;
            end
             % increasing rates:
            loc = rateIdx==idxSex & tempIdx==temp; %rate and temp align
            plotData(i).(g_name)(temp,1) = mean(mean(sleep(i).fract_sleep(loc,:),2,'omitnan'),'omitnan'); %avg 
            plotData(i).(g_name)(temp,2) = std(mean(sleep(i).fract_sleep(loc,:),1,'omitnan'),'omitnan');%./num.trial(i); %err
        end
        % Clustered by temp (regardless of heating/cooling)
        loc = tempIdx==temp; %temp align only
        plotData(i).temp_all(temp,1) = mean(mean(sleep(i).fract_sleep(loc,:),2,'omitnan'),'omitnan'); %avg 
        plotData(i).temp_all(temp,2) = std(mean(sleep(i).fract_sleep(loc,:),1,'omitnan'),'omitnan')./num.trial(i);% %err
    end
    plotData(i).temps = temps;
end


% Build figure:
fig = getfig('',true); 
for i = 1:num.exp
kolor = grouped(i).color;
    for type = 1:2 %increasing | decreasing 
        switch type
            case 2
                section_type = 'increasing';
%                 l_style = '-';
            case 1
                section_type = 'decreasing';
%                 l_style = '--';
        end
    
        % COOLING
        yyaxis left %Distance Data
        subplot(r,c,type);   hold on
        x = grouped(i).(section_type).temps;
        y = grouped(i).(section_type).avg;
        y_err = grouped(i).(section_type).err;
        loc = isnan(y) | isnan(y_err);% remove nans 
        y(loc) = []; x(loc) = []; y_err(loc) = [];
    
        if plot_err
            fill_data = error_fill(x, y, y_err);
            h = fill(fill_data.X, fill_data.Y, kolor, 'EdgeColor','none','HandleVisibility','off');
            set(h, 'facealpha', 0.2)
        end
        plot(x,y,'color',kolor,'linewidth',LW+1,'linestyle','-','Marker','none')
        set(gca,'ydir','reverse')
        
  
         
        yyaxis right
        % Sleeping Data
        x = plotData(i).temps;
        y = plotData(i).(section_type)(:,1);
        y_err = plotData(i).(section_type)(:,2);
        loc = isnan(y)|isnan(y_err);
        x(loc) = [];
        y(loc) = [];
        y_err(loc) = [];
        if plot_err
            fill_data = error_fill(x, y, y_err);
            h = fill(fill_data.X, fill_data.Y, kolor, 'EdgeColor','none','HandleVisibility','off');
            set(h, 'facealpha', 0.2)
        end
        plot(x,y,'color',kolor,'linewidth',LW+1,'linestyle',':','Marker','.','MarkerSize',10)

    end
end

% FORMATING AND LABELS
formatFig(fig,blkbgd,[r,c]);
[yleft,yright] = deal([]);
for type = 1:2
    subplot(r,c,type); 
    yyaxis left
        set(gca,'xcolor',foreColor, 'YColor',foreColor)
        yleft(:,type) = ylim;
        ylabel('food proximity (mm)')
        
    yyaxis right
        set(gca,'YColor',foreColor)
        yright(:,type) = ylim;
        ylabel('fraction of sleeping flies')
    xlabel('temp (\circC)')
end

if equalLim 
    for type = 1:2
        subplot(r,c,type); 
        yyaxis left
        ylim([min(yleft(1,:)), max(yleft(2,:))])
            yyaxis right
            ylim([min(yright(1,:)), max(yright(2,:))])
    end
end

% save figure
save_figure(fig,[saveDir 'sleep and distance during heating and cooling'],fig_type);


%% FIGURES: experiment separated overlay of distance to food and sleeping flies

clearvars('-except',initial_vars{:})
sleepColor = Color('cyan');
distColor = Color('orange');
LW = 1;
r = 1; %rows
c = 2; %columns
plot_err = true;
[foreColor,backColor] = formattingColors(blkbgd);
equalLim = true;

% Organize data
sSpan = 180; %1 minute smoothing
plotData = struct;

% Cluster the sleeping flies by temperature?
for i = 1:num.exp  
    temps = unique(data(i).G(1).TR.temps);
    rateIdx = data(i).G(1).TR.rateIdx;
    tempIdx = data(i).G(1).TR.tempIdx;
    % find rate index
    heatRate = find(data(i).G(1).TR.rates>0);
    coolRate = find(data(i).G(1).TR.rates<0);
    try 
        holdRate = find(data(i).G(1).TR.rates==0);
        ntypes = 3;
    catch
        ntypes = 2;
    end
    
    for temp = 1:length(temps)
        for type = 1:ntypes
            switch type
                case 1 %heating
                    g_name = 'increasing';
                    idxSex = heatRate;
                case 2 %cooling
                    g_name = 'decreasing';
                    idxSex = coolRate;
                case 3 %holding
                    g_name = 'holding';
                    idxSex = holdRate;
            end
             % increasing rates:
            loc = rateIdx==idxSex & tempIdx==temp; %rate and temp align
            plotData(i).(g_name)(temp,1) = mean(mean(sleep(i).fract_sleep(loc,:),2,'omitnan'),'omitnan'); %avg 
            plotData(i).(g_name)(temp,2) = std(mean(sleep(i).fract_sleep(loc,:),1,'omitnan'),'omitnan');%./num.trial(i); %err
        end
        % Clustered by temp (regardless of heating/cooling)
        loc = tempIdx==temp; %temp align only
        plotData(i).temp_all(temp,1) = mean(mean(sleep(i).fract_sleep(loc,:),2,'omitnan'),'omitnan'); %avg 
        plotData(i).temp_all(temp,2) = std(mean(sleep(i).fract_sleep(loc,:),1,'omitnan'),'omitnan')./num.trial(i);% %err
    end
    plotData(i).temps = temps;
end


% Build figures:
for i = 1:num.exp
    
    fig = getfig('',true); 
    % kolor = grouped(i).color;
        for type = 1:2 %increasing | decreasing 
            switch type
                case 2
                    section_type = 'increasing';
    %                 l_style = '-';
                case 1
                    section_type = 'decreasing';
    %                 l_style = '--';
            end
        
            % COOLING
            yyaxis left
            subplot(r,c,type);   hold on
            %Distance Data 
            x = grouped(i).(section_type).temps;
            y = grouped(i).(section_type).avg;
            y_err = grouped(i).(section_type).err;
            loc = isnan(y) | isnan(y_err);% remove nans 
            y(loc) = []; x(loc) = []; y_err(loc) = [];
        
            if plot_err
                fill_data = error_fill(x, y, y_err);
                h = fill(fill_data.X, fill_data.Y, distColor, 'EdgeColor','none','HandleVisibility','off');
                set(h, 'facealpha', 0.2)
            end
            plot(x,y,'color',distColor,'linewidth',LW+1,'linestyle','-','Marker','none')
            set(gca,'ydir','reverse')
            
            yyaxis right
            % Sleeping Data
            x = plotData(i).temps;
            y = plotData(i).(section_type)(:,1);
            y_err = plotData(i).(section_type)(:,2);
            loc = isnan(y)|isnan(y_err);
            x(loc) = [];
            y(loc) = [];
            y_err(loc) = [];
            if plot_err
                fill_data = error_fill(x, y, y_err);
                h = fill(fill_data.X, fill_data.Y, sleepColor, 'EdgeColor','none','HandleVisibility','off');
                set(h, 'facealpha', 0.2)
            end
            plot(x,y,'color',sleepColor,'linewidth',LW+1,'linestyle',':','Marker','.','MarkerSize',10)
        end
    
        % FORMATING AND LABELS
        formatFig(fig,blkbgd,[r,c]);
        [yleft,yright] = deal([]);
        % decreasing temp formatting
        subplot(r,c,1); 
        title('Cooling','Color',foreColor)
        set(gca,'XDir','reverse'); % flip temp direction to match temporal sequence
        yyaxis left
        set(gca,'xcolor',foreColor, 'YColor',distColor,'TickDir','out')
        yleft(:,1) = ylim;
        ylabel('proximity to food (mm)')
        
        xlabel('temp (\circC)')
        yyaxis right
        set(gca,'YColor',backColor)
        yright(:,1) = ylim;
        % increasing temp formatting
        subplot(r,c,2); 
        title('Warming','Color',foreColor)
        yyaxis left
        set(gca,'YColor',backColor,'xcolor',foreColor, 'TickDir','out')
        yleft(:,2) = ylim;
        yyaxis right
        set(gca,'YColor',sleepColor)
        ylabel('fraction of flies sleeping')
        
        xlabel('temp (\circC)')
        yright(:,2) = ylim;

        if equalLim 
            for type = 1:2
                subplot(r,c,type); 
                yyaxis left
                ylim([min(yleft(1,:)), max(yleft(2,:))])
                yyaxis right
                ylim([min(yright(1,:)), max(yright(2,:))])
            end
        end
        
    % save figure
    save_figure(fig,[saveDir expNames{i} ' sleep and distance during heating and cooling'],fig_type);

end

%% 



%% NEW SLEEP METHODS




% ---- Vectorize the data (find the flies that are sleeping....) -----

% find food well location for distance capture later
foodWellLoc = data(i).data(trial).data.wellcenters(:,data(i).T.foodLoc(trial));
c1 = foodWellLoc(1);
c2 = foodWellLoc(2);

% create empty matrixes for the x and y positions of the sleeping flies
sleeping = struct;
[sleeping.X, sleeping.Y, sleeping.all_distance] = deal(nan(trial_length,data(i).T.NumFlies(trial)));
sleeping.sleepNum = zeros(trial_length,1);
[sleeping.dist_avg, sleeping.dist_err] = deal(nan(trial_length,1));
% assign data by frame
for frame = 1:trial_length
    frame_data = sleepLoc(:,:,frame);
    binLoc = find(frame_data>0);
    
    % Find the coordinates of the sleeping flies bins from the discretized data
    y_row = ceil(binLoc/nbins);
    x_row = rem(binLoc-1,nbins)+1;
    x_position = (xedge(x_row) + xedge(x_row+1))/2;
    y_position = (yedge(y_row) + yedge(y_row+1))/2;
    
    % add position data to the matrix:
    if ~isempty(binLoc)
        % number of flies sleeping
        sleepNum = length(x_position);
        sleeping.sleepNum(frame) = sleepNum;
        % location of sleeping flies
        sleeping.X(frame,1:sleepNum) = x_position;
        sleeping.Y(frame,1:sleepNum) = y_position;
        % distance to food...
        temp_dist = sqrt((x_position-c1).^2 + (y_position-c2).^2)./pix2mm;
        sleeping.all_distance(frame,1:sleepNum) = temp_dist;
        % average distance:
        sleeping.dist_avg(frame) = mean(temp_dist);
        sleeping.dist_err(frame) = std(temp_dist);
    end
end






% Vectorize the data (find the flies that are sleeping....)
% find x & y of flies that are sleeping...
for frame = 1:trial_length
    frame_data = sleepLoc(:,:,frame);
    sleeping = find(frame_data>0);

    % Find the coordinates of the sleeping flies bins from the discretized data
    y_row = ceil(sleeping/nbins);
    x_row = rem(sleeping-1,nbins)+1;
    x_position = (xedge(x_row) + xedge(x_row+1))/2;
    y_position = (yedge(y_row) + yedge(y_row+1))/2;

end


% Visualize the 'sleeping flies'
vid = data(i).data(trial).data.T.vidNums(frame);
vidFrame = data(i).data(trial).data.T.vidFrame(frame);

% pull info for the first trial:
dataDate = data(i).T.Date{trial};
vid_name = data(i).T.ExperimentID{trial};
vidDir = [baseFolder dataDate '/' vid_name '_'];
videoPath = [vidDir num2str(vid) '.avi'];
movieInfo = VideoReader(videoPath); %read in video

% Set axis limits for the selected arena
x = data(i).data(trial).data.centre(1);
y = data(i).data(trial).data.centre(2);
r = data(i).data(trial).data.r;
xlimit = [x-(r+50),x+(r+50)];
ylimit = [y-(r+50),y+50+r];

% Plot image of video frame
fig = figure; set(fig,'pos',[-1030 279 772 1009],'color','k');
currentImg = rgb2gray(read(movieInfo,vidFrame));
imshow(currentImg)
xlim(xlimit); ylim(ylimit);  



% find the 'auto bin' lines
xedge = linspace(xlimit(1),xlimit(2),nbins+1);
yedge = linspace(ylimit(1),ylimit(2),nbins+1);

% Plot the bin outline edges:
h_line(yedge,'yellow','-',0.25) 
v_line(xedge,'yellow','-',0.25)


x_points = [xedge(x_row); xedge(x_row+1);  xedge(x_row+1); xedge(x_row)];
y_points = [yedge(y_row); yedge(y_row); yedge(y_row+1); yedge(y_row+1)];

patch(x_points,y_points,Color('gold'),'FaceAlpha',.5,'EdgeColor','none');


























