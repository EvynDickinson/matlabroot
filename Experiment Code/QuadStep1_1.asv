
clear; close all; clc
autoSave = true;
essentialfigs = true;
%% ---------------------Select Date & Experiment to Process ------------------------------

%load excel file:
[excelfile, Excel, xlFile] = load_QuadBowlExperiments;
switch questdlg('Use Excel sheet to select experiment?')
    case 'Yes'
        loc1 = cellfun(@isnan,excelfile(2:end,Excel.numflies));
        loc2 = cellfun(@ischar,excelfile(2:end,Excel.tracked));
        loc = loc1 & loc2;
        rownums = find(loc)+1;
        if isempty(rownums)
            warndlg('No available experiments')
            return
        end
        eligible_files = excelfile([false;loc],[Excel.date, Excel.arena, Excel.expID]);
        FileNames = join(eligible_files);
        fileIdx = listdlg('ListString', FileNames,'ListSize',[250,450]);   
        if isempty(fileIdx); return; end
        % get file info:
        baseFolder = getCloudPath;
        folder = eligible_files{fileIdx,1};
%         arenaSel = eligible_files{fileIdx,2};
        expName = eligible_files{fileIdx,3};
        clear loc1 loc2 loc eligible_files FileNames rownums fileIdx
    case 'No'
        %get base folder pathway
        [baseFolder, folder] = getCloudPath(2);    
%         %select arena to work with:
%         arenaList = {'A', 'B', 'C', 'D'};
%         arenaSel = arenaList{listdlg('ListString', arenaList)};
%         % Select the complete experiments to process
        list_dirs = dir([baseFolder folder, '\*dataMat.mat']); %only matlab files
        list_dirs = {list_dirs(:).name};
        expNames = cellfun(@(x) x(1:end-11),list_dirs,'UniformOutput',false); %pull root name
        expName = expNames{listdlg('ListString', expNames, 'SelectionMode', 'Single')};
        expName = expName(1:end-1);clear expNames
    case 'Cancel'
        return
end

% Saving and Loading Directories:
% vidFolder = [baseFolderfolder '\Arena ' arenaSel];
analysisDir = [baseFolder folder '\analysis\'];
if ~isfolder(analysisDir); mkdir(analysisDir); end
% expPDF = [analysisDir folder expName ' summary.pdf'];
XLrow = find(strcmpi(excelfile(:,Excel.date), folder) & ...
             strcmpi(excelfile(:,Excel.expID), expName)); % & ...
%              strcmpi(excelfile(:,Excel.arena), arenaSel(end:end))%rows with sel date with ARENA ID

% Load relevant data files (.mat, .csv, .h5)
warning off 
expData = load([baseFolder folder '\' expName ' dataMat.mat']);
tempLog = readmatrix([baseFolder folder '\' expName '_RampLog']);
nvids = expData.parameters.numVids;

%load tracking predictions     
data = struct;
disp('Loading data files...')
for vid = 1:nvids
    try
        filePath = [baseFolder folder '\' expName '_' num2str(vid) '.h5'];
        data(vid).occupancy_matrix = h5read(filePath,'/track_occupancy');
        data(vid).tracks = h5read(filePath,'/tracks');
    catch
        try 
            filePath = [baseFolder folder '\' expName '_' num2str(vid) '.avi.predictions.slp.h5'];
            data(vid).occupancy_matrix = h5read(filePath,'/track_occupancy');
            data(vid).tracks = h5read(filePath,'/tracks');
        catch
            filePath = [baseFolder folder '\' expName '_' num2str(vid) '.avi.predictions.analysis.h5'];
            data(vid).occupancy_matrix = h5read(filePath,'/track_occupancy');
            data(vid).tracks = h5read(filePath,'/tracks');
        end
    end
end; clear filePath

initial_vars = who; initial_vars{end+1} = 'initial_vars';
fprintf('\nNext\n')

%% Determine the outlines for each arena
movieInfo = VideoReader([baseFolder folder '\' expName   '_1.avi']); %read in video
demoImg = rgb2gray(read(movieInfo,1));
radii = 165; %well surround regions
% Select the well centers from top right corner and go clockwise:
if ~exist([analysisDir 'well_locations.mat'],'file')
    h = warndlg('Follow arena order and select the well locations starting at "9 o''clock" proceed clock wise'); uiwait(h)
    wellcenters = readPoints(demoImg,16); % get locations of the wells from the image
    r = 435; % radius of the arena
    arenaIdx = {'A', 'B', 'C', 'D'}; % order of arenas on video going clockwise from upper left corner
    % save the arena well locations:
    save([analysisDir 'well_locations.mat'], 'wellcenters','arenaIdx','r');
else
    load([analysisDir 'well_locations.mat']);
end

% Find the arena centers and well locations:
arenaData = struct;
A = [];
CList = {'DeepPink','Orange', 'Lime', 'DodgerBlue'};
for arena = 1:4
    kolor = Color(CList{arena});
    arenaData(arena).name = ['Arena ' arenaIdx{arena}];
    arenaData(arena).color = kolor;
    % Divide well centers by arena
    roi = (arena-1)*4 + 1 : (arena-1)*4 + 4;
    arenaData(arena).wellcenters = wellcenters(:,roi);
    
    % Find the center of each arena
    x1 = arenaData(arena).wellcenters(1,1:2:4);
    y1 = arenaData(arena).wellcenters(2,1:2:4);
    x2 = arenaData(arena).wellcenters(1,2:2:4);
    y2 = arenaData(arena).wellcenters(2,2:2:4);
    [xi,yi] = polyxpoly(x1,y1,x2,y2);
    arenaData(arena).centre = [xi;yi];
    
    % Well labels
    AI = ['Arena' arenaIdx{arena}];
    wellLabels = {expData.parameters.(AI).well_1;...
                  expData.parameters.(AI).well_2;...
                  expData.parameters.(AI).well_3;...
                  expData.parameters.(AI).well_4};   
    arenaData(arena).wellLabels = wellLabels;
    A = [A,wellLabels];
end
wellLabels = array2table(A,"VariableNames",["Arena A","Arena B","Arena C","Arena D"]);
disp(wellLabels)

% Visual check of alignment, ID, and well contents
fig = figure; 
    imshow(demoImg); set(fig, 'color', 'k')
    hold on
    for arena = 1:4 
        kolor = arenaData(arena).color;
        centre = arenaData(arena).centre;
        WC = arenaData(arena).wellcenters;
        WL = arenaData(arena).wellLabels;
        % draw arena circles
        viscircles(centre', r, 'color', kolor);
        % label arenas to show that it's what we think:
        text(centre(1),centre(2),arenaData(arena).name,'color',...
             kolor,'fontsize', 14,'horizontalAlignment', 'center')
        for well = 1:4
            % label wells
            text(WC(1,well),WC(2,well)-75,strrep(WL{well},'_',' '),'color',...
             'w','fontsize',10,'horizontalAlignment','center')
            % draw well ROIs
            viscircles(WC(:,well)', radii, 'color', 'w','linestyle','--','linewidth', 0.1);
        end
    end
    title([strrep(expName,'_',' ') ' ' folder],'color','w')

% Does the arena fit work???
answer = questdlg('Okay arena alignment?');
switch answer
    case 'Yes'
        save_figure(fig, [analysisDir 'Arena outlines'],'-png',true);
    case 'Cancel'
        % don't save figure but keep going
    case 'No'
        return
end

% Tidy variables / environment 
initial_vars = [initial_vars; 'arenaData'; 'arenaIdx'; 'r'; 'wellcenters'; 'demoImg';'radii'];
clearvars('-except',initial_vars{:})
fprintf('Next\n')

%% Get the number of flies in each arena
% Number of flies:
nframes = 3;
for arena = 1:4
    arenaData(arena).nflies = excelfile{XLrow(arena),Excel.numflies};
    nflies(arena) = arenaData(arena).nflies;
end
movieInfo = VideoReader([baseFolder folder '\' expName '_1.avi']); %read in video
ii = randi(size(data(1).occupancy_matrix,2),[3,1]); %random selection of frames to count fly number
demoImg = rgb2gray(read(movieInfo,1));
if any(isnan(nflies)) 
    nflies = [];
    % manual count of flies
    fprintf('\nCount the number of flies in the picture by clicking them\n then hit ENTER\n')
    T = true;
   while T % get the number of flies in the arena
        for jj = 1:nframes
            demoImg = rgb2gray(read(movieInfo,ii(jj)));
            PT(jj).frame = readPoints(demoImg);
            for arena = 1:4
                centre = arenaData(arena).centre;
                X = PT(jj).frame(1,:);
                Y = PT(jj).frame(2,:);
                % find points within each arena sphere
                loc = (((X-centre(1)).^2 + (Y-centre(2)).^2).^0.5)<=r;
                nflies(arena,jj) = sum(loc);
            end
        end
        disp('Number of flies counted')
        A = nflies(1,:)'; B = nflies(2,:)'; C = nflies(3,:)'; D = nflies(4,:)';
        numFlies = [A,B,C,D];
        disp(table(A,B,C,D))
        count_match = (diff(numFlies,(nframes-1),1)==0);
        if all(count_match)
            nflies = [];
            for arena = 1:4
                nflies(arena) = median(numFlies(:,arena)); 
                arenaData(arena).nflies = nflies(arena);
            end
            T = false;
        else
%             disp('    A     B     C     D')
%             disp(nflies')
            switch questdlg('Nonmatching fly counts, manually select number?:')
                case 'Yes'
                    for arena = 1:4
                        arenaNums{arena} = num2str(median(numFlies(:,arena)));
                        if ~count_match(arena)
                            arenaNums{arena} = 'NaN';
                        end
                    end
                    prompt = {'Arena A','Arena B', 'Arena C', 'Arena D'}; dlgtitle = 'Input';
                    answer = inputdlg(prompt,dlgtitle,[1 25],arenaNums);
                    nflies = [];
                    for arena = 1:4
                        arenaData(arena).nflies = str2double(answer{arena});
                        nflies(arena) = arenaData(arena).nflies;
                    end
                    T = false;
                case 'No'
                    T = true;
                case 'Cancel'
                    return
            end
        end
    end
    % write number of flies into the excel sheet
    try
        for arena = 1:4
            xlswrite(xlFile, {num2str(nflies(arena))}, 'Exp List', [Alphabet(Excel.numflies) num2str(XLrow(arena))]);
        end
    catch
        h = warndlg('Close Experiment Summary excel file and then close this warning box');
        uiwait(h)
        for arena = 1:4
            xlswrite(xlFile, {num2str(nflies(arena))}, 'Exp List', [Alphabet(Excel.numflies) num2str(XLrow(arena))]);
        end
    end
end
disp('Number of flies:')
disp('    A     B     C     D')
disp(nflies)

%% Start data table that concatenates across all videos:

[vidNums, vidFrame, frame, temperature, tempWork] = deal([]);
currFrame = 0;
for vid = 1:nvids
% find number of frames per vid
    occupancy.frameROI(vid,1) = currFrame+1;
    nframes = size(data(vid).occupancy_matrix,2);
    currFrame = nframes + currFrame;
    occupancy.frameROI(vid,2) = currFrame;
    % video numbers
    vidNums = [vidNums; vid*ones(nframes,1)];
    % frame num in video
    vidFrame = [vidFrame; (1:nframes)'];
    % total frame count
    frame = [frame; (occupancy.frameROI(vid,1):occupancy.frameROI(vid,2))'];
    % temperature log
    logROI(1) = find(tempLog(:,1)==expData.tempLogStart(vid,3));
    logROI(2) = find(tempLog(:,1)==expData.tempLogEnd(vid,3));
    tempCourse = tempLog(logROI(1):logROI(2),2);
    x = round(linspace(1, nframes, length(tempCourse)));
    fullTempList = interp1(x,tempCourse,1:nframes,'spline');   
    data(vid).tempLog = fullTempList;
    temperature = [temperature; fullTempList']; 
    % temp plate work log
    workCourse = tempLog(logROI(1):logROI(2),4);
    x = round(linspace(1, nframes, length(workCourse)));
    fullWorkList = interp1(x,workCourse,1:nframes,'spline');   
    tempWork = [tempWork; fullWorkList']; 
end
occupancy.temp = temperature;
% Time count
time = (linspace(1, (frame(end)/3)/60, frame(end)))';
occupancy.time = time;

% Data table with continuous variables:
T = table(frame, time, temperature, tempWork, vidNums, vidFrame);

initial_vars = [initial_vars; 'nflies'; 'demoImg','wellLabels'; 'occupancy'; 'T'];
clearvars('-except',initial_vars{:})
fprintf('Next\n')

%% Find the x-y coordinates for each fly

% how many tracks max within this whole experiment?
w = 0;
for vid = 1:nvids
    w = max([size(data(vid).occupancy_matrix,1),w]);
end
[X, Y] = deal(nan(T.frame(end),w));

% load fly locations into the X & Y matrices
for vid = 1:nvids
    % ---- fly tracked locations -------
    headData = squeeze(data(vid).tracks(:,1,:,:));
    % x-y coordinates of flies for each frame
    x_loc = squeeze(headData(:,1,:));
    y_loc = squeeze(headData(:,2,:));
    data(vid).x_loc_raw = x_loc;
    data(vid).y_loc_raw = y_loc;
    dims = size(x_loc); 
    roi_1 = occupancy.frameROI(vid,1):occupancy.frameROI(vid,2);
    roi_2 = 1:dims(2);
    X(roi_1,roi_2) = x_loc;
    Y(roi_1,roi_2) = y_loc;
end

% Add X and Y to the data table:
T = addvars(T,X,Y);
% head(T,5)
   
clearvars('-except',initial_vars{:})
fprintf('Next\n')

%% Determine the fly tracked points for each arena

flyCount = [];
% which points are within the sphere of each arena?
for arena = 1:4
    % Pull variables:
    X = T.X;
    Y = T.Y;
    centre = arenaData(arena).centre;
    c1 = centre(1);
    c2 = centre(2);
    
    % Find points within arena:
    loc = sqrt((X-c1).^2 + (Y-c2).^2)<=r; % tracked points within circle
    X(~loc) = nan;
    Y(~loc) = nan;
    flyNum = sum(loc,2); % how many points tracked

    % Save into data structure:
    data(vid).x_loc = X;
    data(vid).y_loc = Y;

    % Remove some nans to make smaller matrix
    dims = size(X);
    [x_loc, y_loc] = deal(nan(dims(1),max(flyNum)));
    for ii = 1:dims(1)
        keep_loc = ~isnan(X(ii,:));
        x_loc(ii,1:flyNum(ii)) = X(ii,keep_loc);
        y_loc(ii,1:flyNum(ii)) = Y(ii,keep_loc);
    end
    arenaData(arena).x_loc = x_loc;
    arenaData(arena).y_loc = y_loc;
    
    % fly count for this arena
    flyCount = [flyCount,flyNum];
    arenaData(arena).flyCount = flyNum;
    % Save to structures
    switch arena
        case 1
            flyCount_A = flyNum;
            xA = x_loc;
            yA = y_loc;
        case 2
            flyCount_B = flyNum;
            xB = x_loc;
            yB = y_loc;
        case 3
            flyCount_C = flyNum;
            xC = x_loc;
            yC = y_loc;
        case 4
            flyCount_D = flyNum;
            xD = x_loc;
            yD = y_loc;
    end
    
end

% save the sata to appropriate structures:
try 
    T.flyCount = flyCount;
    T.flyCount_A = flyCount_A;
    T.flyCount_B = flyCount_B;
    T.flyCount_C = flyCount_C;
    T.flyCount_D = flyCount_D;
    T.xA = xA; T.yA = yA;
    T.xB = xB; T.yB = yB;
    T.xC = xC; T.yC = yC;
    T.xD = xD; T.yD = yD;
catch 
    T = addvars(T,flyCount,flyCount_A,flyCount_B,flyCount_C,flyCount_D,xA,yA,xB,yB,xC,yC,xD,yD);
    T = movevars(T,'X','After','flyCount_D');
    T = movevars(T,'Y','After','X');
end

occupancy.flyCount = flyCount;

initial_vars = [initial_vars; 'flyCount'];
clearvars('-except',initial_vars{:})
fprintf('Next\n')

T = movevars(T,'X','After','flyCount_D');
T = movevars(T,'Y','After','X');
% head(T,1)
% T.Properties.VariableNames
% T = removevars(T,{'flyCount_1','flyCount_A_1','flyCount_C_1','flyCount_D_1','flyCount_B_1'});

%% FIGURES: check on the number of flies per arena
n = 2; % how many miscounted frames to look at


% Check flycount offset by arena:
for arena = 1:4
    save_loc = [baseFolder folder '\Arena ' arenaIdx{arena} '\Over and Under Tracked Images.pdf'];
    offset = flyCount(:,arena)-nflies(arena);
    [~,idx] = sort(offset);
    lowIDX = idx(1:n);          % lowest fly count frame index
    highIDX = idx(end-n+1:end); % highest fly count frame index
    
    % -------------- LOW COUNTS ---------------
    % load video information
    for ii = 1:n
        frame = lowIDX(ii);
        vidNum = T.vidNums(frame);
        vidframe = T.vidFrame(frame);
        movieInfo = VideoReader([baseFolder folder '\' expName '_' num2str(vidNum) '.avi']); %read in video
        img = read(movieInfo,vidframe);
        fig = figure;
            imshow(img); set(fig,'color', 'k')
            hold on
            x = T.X(frame,:);
            y = T.Y(frame,:);
            scatter(x,y, 10, 'y')
            % draw arena circle
            kolor = arenaData(arena).color;
            centre = arenaData(arena).centre;
            viscircles(centre', r, 'color', kolor);
            % write the number of frames that are offset
            for a = 1:4
                AC = arenaData(a).centre;
                str = num2str(T.flyCount(frame,a)-nflies(a));
                text(AC(1),AC(2),str,'color','w','fontsize',14,'horizontalAlignment', 'center')
            end
            % Add title with temperature
            title([strrep(expName,'_',' ') ' ' folder ' | Temperature: ' num2str(T.temperature(frame))],...
                'color', 'w')
        % save image??
        export_fig(fig, save_loc, '-pdf', '-nocrop', '-r300' , '-painters', '-rgb','-append');
        close(fig)
    end

     % -------------- HIGH COUNTS ---------------
    % load video information
    for ii = 1:n
        frame = highIDX(ii);
        vidNum = T.vidNums(frame);
        vidframe = T.vidFrame(frame);
        movieInfo = VideoReader([baseFolder folder '\' expName '_' num2str(vidNum) '.avi']); %read in video
        img = read(movieInfo,vidframe);
        fig = figure;
            imshow(img); set(fig,'color', 'k')
            hold on
            x = T.X(frame,:);
            y = T.Y(frame,:);
            scatter(x,y, 10, 'y')
            % draw arena circle
            kolor = arenaData(arena).color;
            centre = arenaData(arena).centre;
            viscircles(centre', r, 'color', kolor);
            % write the number of frames that are offset
            for a = 1:4
                AC = arenaData(a).centre;
                str = num2str(T.flyCount(frame,a)-nflies(a));
                text(AC(1),AC(2),str,'color','w','fontsize',14,'horizontalAlignment', 'center')
            end
            % Add title with temperature
            title([strrep(expName,'_',' ') ' ' folder ' | Temperature: ' num2str(T.temperature(frame))],...
                'color', 'w')
        export_fig(fig, save_loc, '-pdf', '-nocrop', '-r300' , '-painters', '-rgb','-append');
        close(fig)
    end
end

%% FIGURES : Visualize tracking across all four quadrants
nrows = 2;
ncols = 3;
sb(1).idx = 4; %A
sb(2).idx = 1; %B
sb(3).idx = 5; %C
sb(4).idx = 2; %D
sb(5).idx = [3,6];

fig = figure; set(fig, 'pos', [99 200 895 635])
    for arena = 1:4
        subplot(nrows, ncols, sb(arena).idx)
        hold on
        kolor = arenaData(arena).color;
        histogram(arenaData(arena).flyCount,'FaceColor', kolor,'EdgeColor','w','facealpha', 1)
        v_line(arenaData(arena).nflies,'w','--',2)
        xlabel('# Flies')
        ylabel('Count')
        title(arenaData(arena).name)
    end
    subplot(nrows, ncols, sb(5).idx)
    histogram(sum(flyCount,2),'FaceColor', Color('grey'),'EdgeColor','w')
    v_line(sum(nflies),'r','-',2)
    xlabel('# Flies')
    ylabel('Count')
    title('Full plate')
    formatFig(fig, true, [nrows,ncols],sb);

save_figure(fig, [analysisDir 'Fly Count Histogram'],'-png');

% Tracking with temperature
sSpan = 360;
LW = 2;
nrows = 3; ncols = 1;
sb(1).idx = 1;
sb(2).idx = 2:3;
fig = figure; set(fig, 'pos', [298 260 508 483])
subplot(nrows, ncols, sb(1).idx)
plot(T.time, T.temperature,'color', 'w','linewidth', LW)
xlabel('Time (min)')
ylabel('Temp (\circC)')
subplot(nrows, ncols, sb(2).idx)
hold on
for arena = 1:4
    y = arenaData(arena).flyCount-arenaData(arena).nflies;
    plot(T.time, smooth(y,sSpan), 'color', arenaData(arena).color, 'linewidth', LW)
end
h_line(0,'grey',':',1)
xlabel('Time (min)')
ylabel('Fly count offset (#)')
formatFig(fig, true, [nrows, ncols],sb);

save_figure(fig, [analysisDir 'Fly Count over time'],'-png');

clearvars('-except',initial_vars{:})

%% Find number of flies within each well sphere & fly distance to wells
pix2mm = 12.8; %conversion from pixels to mm for these videos
for arena = 1:4
    % Pull fly coordinate position data for this arena 
    X = T.(['x' arenaIdx{arena}]);
    Y = T.(['y' arenaIdx{arena}]);
    
    % Get center position for each well
    centers = arenaData(arena).wellcenters;

    % Calculate distance to food and occupancy counts
    for well = 1:4
        % center of the well coordinates
        c1 = centers(1,well);
        c2 = centers(2,well);

        % Find distance to well center
        dist2well = sqrt((X-c1).^2 + (Y-c2).^2);
        
        % Find points within arena:
        loc = dist2well<=radii; % tracked points within circle
        N = sum(loc,2); % how many points tracked
        
        % store data
        arenaData(arena).dist2well(:,well) = mean(dist2well./pix2mm,2,'omitnan');
        arenaData(arena).dist2well_err(:,well) = std(dist2well./pix2mm,0,2,'omitnan');
        arenaData(arena).occ_N(:,well) = N;
        arenaData(arena).occ_P(:,well) = N/nflies(arena);
    end
end

initial_vars{end+1} = 'pix2mm';
clearvars('-except',initial_vars{:})
fprintf('Next\n')

%% FIGURE: distance to food and well occupancy acros the experiment
sSpan = 360;
LW = 1;
nrows = 6;
ncols = 1;
sb(1).idx = 1;   % tracking
sb(2).idx = 2;   % temperature
sb(3).idx = 3:4; % occupancy
sb(4).idx = 5:6; % distance to food

for arena = 1:4
    fig = figure; set(fig, 'pos', [297 48 1065 820])
    % TRACKING 
    subplot(nrows,ncols,sb(1).idx)
        plot(T.time, smooth(T.flyCount(:,arena),sSpan),'color', arenaData(arena).color,'linewidth', LW)
        ylabel('# flies') 
    % TEMPERATURE
    subplot(nrows,ncols,sb(2).idx)
        plot(T.time, T.temperature,'color', 'w','linewidth', LW)
        ylabel('Temp (\circC)')
    % OCCUPATION
    subplot(nrows,ncols,sb(3).idx)
        hold on
        for well = 1:4
            kolor = pullFoodColor(arenaData(arena).wellLabels{well});
            y = smooth(arenaData(arena).occ_P(:,well),sSpan);
            plot(T.time, y, 'linewidth', LW, 'color', kolor);
        end
        ylabel('occupation probability')
    
    % DISTANCE TO FOOD
    subplot(nrows,ncols,sb(4).idx)
        hold on
        for well = 1:4
            kolor = pullFoodColor(arenaData(arena).wellLabels{well});
            y = smooth(arenaData(arena).dist2well(:,well),sSpan);
            plot(T.time, y, 'linewidth', LW, 'color', kolor);
        end
        ylabel('distance to food (mm)')
        xlabel('time (min)');
        
    formatFig(fig, true, [nrows,ncols],sb);
    subplot(nrows,ncols,sb(3).idx)
    l = legend(strrep(arenaData(arena).wellLabels,'_','-'));
    set(l, 'box', 'off', 'textcolor', 'w','edgecolor', 'k','location', 'northwest');
    subplot(nrows, ncols, sb(1).idx)
    titleName = strrep({[folder ' ' expName ' Arena ' arenaIdx{arena};...
            expData.parameters.(['Arena' Alphabet(arena)]).genotype}], '_',' ');
    title(titleName,'color', 'w')
    
    save_loc = [baseFolder folder '\Arena ' arenaIdx{arena} '\time course overview'];
    save_figure(fig, save_loc, '-png',true);
end

clearvars('-except',initial_vars{:})
fprintf('Next\n')


%% ------------------- Save preformatted data for QuadStep2 ------------------------
disp('Saving data file...')
clearvars('-except',initial_vars{:})
save([analysisDir expName ' preformed data'])
disp('Formatted data saved')
disp('Done')

