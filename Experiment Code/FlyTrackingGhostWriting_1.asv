
%      fig = cropCheck;




%% Tracking models and code copy:
clear
% select the folder to analyze 
[basePath, folder] = getCloudPath(1);

% parameter inputs: 
defaultModel = 'G:\My Drive\Jeanne Lab\DATA\Tracking\models';
model_1 = 'centered_instance_model';
model_2 = 'centroid_model';
batchCode = 'batch.py';
trackingDir = [basePath 'Tracking\'];

% Copy model and program into selected folder
copyfile([trackingDir model_1], folder)
copyfile([trackingDir model_2], folder)
copyfile([trackingDir batchCode], folder)




% TODO: update to partition across multiple videos & find missing videos,
% move those into a new folder and track them...

% % how many partitions? 
% num_it = str2double(cell2mat(inputdlg('How many tracking partitions?')));
% % how many videos total in the folder?
% dirc = dir([folder '\*avi']);
% nvideos = length(dirc);
% groupSize = floor(nvideos/num_it);
% % copy videos into new folders and move models into each
% for ii = 1:num_it
%     loc = ii:ii+groupSize;
%     % make new folder



%% 

% import os
% import subprocess
% # Run tracking
% subprocess.call('(for %i in (*.avi) do sleap-track ''%i'' --tracking.tracker simple --tracking.similarity centroid -m "centered_instance_model" -m "centroid_model")', shell=True) ##--batch_size 4
% # Convert tracking to analysis file
% subprocess.call('(for %i in (*.slp) do sleap-convert --format analysis ''%i'')', shell=True)


clear

% select the folder to analyzes
[~, folder] = getCloudPath(1);



codeBlockPath = [folder 'TrackingCodeBlock.txt'];
vidPath = [folder '\'];
% Pull the full list of movies that should have been tracked:
list_dirs = dir([vidPath, '*.avi']); %only matlab files
videoNames = {list_dirs(:).name};
videos = cellfun(@(x) strsplit(x, '.'), videoNames, 'UniformOutput', false);
videos = vertcat(videos{:}); % To remove nesting of cell array newA
videos = videos(:,1);
% Pull list of SLP tracking files:
list_dirs = dir([vidPath, '*.slp']); %only matlab files
trackNames = {list_dirs(:).name};
tracking = cellfun(@(x) strsplit(x, '.'), trackNames, 'UniformOutput', false);
tracking = vertcat(tracking{:}); % To remove nesting of cell array newA
tracking = tracking(:,1);
    % Pull list of prediction files:
    list_dirs = dir([vidPath, '*.h5']); %only matlab files
    predictionNames = {list_dirs(:).name};
    predictions = cellfun(@(x) strsplit(x, '.'), predictionNames, 'UniformOutput', false);
    for ii = 1:length(predictions)
    predictions = vertcat(predictions{:}); % To remove nesting of cell array
    predictions = predictions(:,1);
    
    % Find and reprint the missing files:
    trackFail = find(ismember(videos, tracking)==false);
    precictFail = find(ismember(videos, predictions)==false);
    if ~isempty(trackFail) || ~isempty(precictFail)
        fid = fopen(codeBlockPath,'w');
        disp(['Missing files found in ' arena])
        fprintf(fid, '\n\nMISSED TRACKING/PREDICTION FILES:');
        if ~isempty(trackFail)
            %print out new files to be run
            for ii = 1:length(trackFail)
            vidName = videoNames{trackFail(ii)};
            trackStr = ['\n' 'sleap-track --tracking.tracker simple '...
                        ' -m "centered_instance_model" -m "centroid_model" '...
                        '"' vidName '"'];
            fprintf(fid, trackStr);
            end
        end
        if ~isempty(precictFail)
        %   print missing prediction files
            for ii = 1:length(precictFail)
                vidName = videoNames{precictFail(ii)};
                predName = [vidName '.predictions.slp'];
                analName = [vidName(1:end-4) '.h5'];
                convertStr = ['\n' 'sleap-convert --format analysis -o '...
                            '"' analName '" '... % analysis file
                            '"' predName '"']; %prediciton file 
                fprintf(fid, convertStr);
            end
        end
        fclose(fid);
    else
        disp(['No missing tracking files in ' arena])
    end
end